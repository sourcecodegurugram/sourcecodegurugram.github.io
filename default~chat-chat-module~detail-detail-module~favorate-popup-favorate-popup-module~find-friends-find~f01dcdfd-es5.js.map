{"version":3,"sources":["node_modules/@angular/cdk/esm2015/drag-drop.js","src/app/material.module.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { normalizePassiveListenerOptions, _supportsShadowDom } from '@angular/cdk/platform';\nimport { coerceBooleanProperty, coerceElement, coerceNumberProperty, coerceArray } from '@angular/cdk/coercion';\nimport { Subscription, Subject, interval, animationFrameScheduler, Observable, merge } from 'rxjs';\nimport { startWith, takeUntil, take, map, switchMap, tap } from 'rxjs/operators';\nimport { Injectable, NgZone, Inject, InjectionToken, NgModule, ContentChildren, ElementRef, EventEmitter, forwardRef, Input, Output, Optional, Directive, ChangeDetectorRef, SkipSelf, ContentChild, ViewContainerRef, isDevMode, TemplateRef, ɵɵdefineInjectable, ɵɵinject } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { Directionality } from '@angular/cdk/bidi';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * \\@docs-private\n * @param {?} dest\n * @param {?} source\n * @return {?}\n */\nfunction extendStyles(dest, source) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            dest[key] = (/** @type {?} */ (source[key]));\n        }\n    }\n    return dest;\n}\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * \\@docs-private\n * @param {?} element Element on which to toggle the drag interactions.\n * @param {?} enable Whether the drag interactions should be enabled.\n * @return {?}\n */\nfunction toggleNativeDragInteractions(element, enable) {\n    /** @type {?} */\n    const userSelect = enable ? '' : 'none';\n    extendStyles(element.style, {\n        touchAction: enable ? '' : 'none',\n        webkitUserDrag: enable ? '' : 'none',\n        webkitTapHighlightColor: enable ? '' : 'transparent',\n        userSelect: userSelect,\n        msUserSelect: userSelect,\n        webkitUserSelect: userSelect,\n        MozUserSelect: userSelect\n    });\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Parses a CSS time value to milliseconds.\n * @param {?} value\n * @return {?}\n */\nfunction parseCssTimeUnitsToMs(value) {\n    // Some browsers will return it in seconds, whereas others will return milliseconds.\n    /** @type {?} */\n    const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n    return parseFloat(value) * multiplier;\n}\n/**\n * Gets the transform transition duration, including the delay, of an element in milliseconds.\n * @param {?} element\n * @return {?}\n */\nfunction getTransformTransitionDurationInMs(element) {\n    /** @type {?} */\n    const computedStyle = getComputedStyle(element);\n    /** @type {?} */\n    const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n    /** @type {?} */\n    const property = transitionedProperties.find((/**\n     * @param {?} prop\n     * @return {?}\n     */\n    prop => prop === 'transform' || prop === 'all'));\n    // If there's no transition for `all` or `transform`, we shouldn't do anything.\n    if (!property) {\n        return 0;\n    }\n    // Get the index of the property that we're interested in and match\n    // it up to the same index in `transition-delay` and `transition-duration`.\n    /** @type {?} */\n    const propertyIndex = transitionedProperties.indexOf(property);\n    /** @type {?} */\n    const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n    /** @type {?} */\n    const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n    return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n        parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\n}\n/**\n * Parses out multiple values from a computed style into an array.\n * @param {?} computedStyle\n * @param {?} name\n * @return {?}\n */\nfunction parseCssPropertyValue(computedStyle, name) {\n    /** @type {?} */\n    const value = computedStyle.getPropertyValue(name);\n    return value.split(',').map((/**\n     * @param {?} part\n     * @return {?}\n     */\n    part => part.trim()));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Options that can be used to bind a passive event listener.\n * @type {?}\n */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * Options that can be used to bind an active event listener.\n * @type {?}\n */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({ passive: false });\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n * @type {?}\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n * \\@docs-private\n * @template T\n */\nclass DragRef {\n    /**\n     * @param {?} element\n     * @param {?} _config\n     * @param {?} _document\n     * @param {?} _ngZone\n     * @param {?} _viewportRuler\n     * @param {?} _dragDropRegistry\n     */\n    constructor(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._config = _config;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n        /**\n         * CSS `transform` applied to the element when it isn't being dragged. We need a\n         * passive transform in order for the dragged element to retain its new position\n         * after the user has stopped dragging and because we need to know the relative\n         * position in case they start dragging again. This corresponds to `element.style.transform`.\n         */\n        this._passiveTransform = { x: 0, y: 0 };\n        /**\n         * CSS `transform` that is applied to the element while it's being dragged.\n         */\n        this._activeTransform = { x: 0, y: 0 };\n        /**\n         * Emits when the item is being moved.\n         */\n        this._moveEvents = new Subject();\n        /**\n         * Subscription to pointer movement events.\n         */\n        this._pointerMoveSubscription = Subscription.EMPTY;\n        /**\n         * Subscription to the event that is dispatched when the user lifts their pointer.\n         */\n        this._pointerUpSubscription = Subscription.EMPTY;\n        /**\n         * Subscription to the viewport being scrolled.\n         */\n        this._scrollSubscription = Subscription.EMPTY;\n        /**\n         * Subscription to the viewport being resized.\n         */\n        this._resizeSubscription = Subscription.EMPTY;\n        /**\n         * Cached reference to the boundary element.\n         */\n        this._boundaryElement = null;\n        /**\n         * Whether the native dragging interactions have been enabled on the root element.\n         */\n        this._nativeInteractionsEnabled = true;\n        /**\n         * Elements that can be used to drag the draggable item.\n         */\n        this._handles = [];\n        /**\n         * Registered handles that are currently disabled.\n         */\n        this._disabledHandles = new Set();\n        /**\n         * Layout direction of the item.\n         */\n        this._direction = 'ltr';\n        /**\n         * Amount of milliseconds to wait after the user has put their\n         * pointer down before starting to drag the element.\n         */\n        this.dragStartDelay = 0;\n        this._disabled = false;\n        /**\n         * Emits as the drag sequence is being prepared.\n         */\n        this.beforeStarted = new Subject();\n        /**\n         * Emits when the user starts dragging the item.\n         */\n        this.started = new Subject();\n        /**\n         * Emits when the user has released a drag item, before any animations have started.\n         */\n        this.released = new Subject();\n        /**\n         * Emits when the user stops dragging an item in the container.\n         */\n        this.ended = new Subject();\n        /**\n         * Emits when the user has moved the item into a new container.\n         */\n        this.entered = new Subject();\n        /**\n         * Emits when the user removes the item its container by dragging it into another container.\n         */\n        this.exited = new Subject();\n        /**\n         * Emits when the user drops the item inside a container.\n         */\n        this.dropped = new Subject();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = this._moveEvents.asObservable();\n        /**\n         * Handler for the `mousedown`/`touchstart` events.\n         */\n        this._pointerDown = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            this.beforeStarted.next();\n            // Delegate the event based on whether it started from a handle or the element itself.\n            if (this._handles.length) {\n                /** @type {?} */\n                const targetHandle = this._handles.find((/**\n                 * @param {?} handle\n                 * @return {?}\n                 */\n                handle => {\n                    /** @type {?} */\n                    const target = event.target;\n                    return !!target && (target === handle || handle.contains((/** @type {?} */ (target))));\n                }));\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                    this._initializeDragSequence(targetHandle, event);\n                }\n            }\n            else if (!this.disabled) {\n                this._initializeDragSequence(this._rootElement, event);\n            }\n        });\n        /**\n         * Handler that is invoked when the user moves their pointer after they've initiated a drag.\n         */\n        this._pointerMove = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            if (!this._hasStartedDragging) {\n                /** @type {?} */\n                const pointerPosition = this._getPointerPositionOnPage(event);\n                /** @type {?} */\n                const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n                /** @type {?} */\n                const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n                /** @type {?} */\n                const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\n                // Only start dragging after the user has moved more than the minimum distance in either\n                // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\n                // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n                // per pixel of movement (e.g. if the user moves their pointer quickly).\n                if (isOverThreshold) {\n                    /** @type {?} */\n                    const isDelayElapsed = Date.now() >= this._dragStartTime + (this.dragStartDelay || 0);\n                    if (!isDelayElapsed) {\n                        this._endDragSequence(event);\n                        return;\n                    }\n                    // Prevent other drag sequences from starting while something in the container is still\n                    // being dragged. This can happen while we're waiting for the drop animation to finish\n                    // and can cause errors, because some elements might still be moving around.\n                    if (!this._dropContainer || !this._dropContainer.isDragging()) {\n                        this._hasStartedDragging = true;\n                        this._ngZone.run((/**\n                         * @return {?}\n                         */\n                        () => this._startDragSequence(event)));\n                    }\n                }\n                return;\n            }\n            // We only need the preview dimensions if we have a boundary element.\n            if (this._boundaryElement) {\n                // Cache the preview element rect if we haven't cached it already or if\n                // we cached it too early before the element dimensions were computed.\n                if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n                    this._previewRect = (this._preview || this._rootElement).getBoundingClientRect();\n                }\n            }\n            /** @type {?} */\n            const constrainedPointerPosition = this._getConstrainedPointerPosition(event);\n            this._hasMoved = true;\n            event.preventDefault();\n            this._updatePointerDirectionDelta(constrainedPointerPosition);\n            if (this._dropContainer) {\n                this._updateActiveDropContainer(constrainedPointerPosition);\n            }\n            else {\n                /** @type {?} */\n                const activeTransform = this._activeTransform;\n                activeTransform.x =\n                    constrainedPointerPosition.x - this._pickupPositionOnPage.x + this._passiveTransform.x;\n                activeTransform.y =\n                    constrainedPointerPosition.y - this._pickupPositionOnPage.y + this._passiveTransform.y;\n                this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n                // Apply transform as attribute if dragging and svg element to work for IE\n                if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n                    /** @type {?} */\n                    const appliedTransform = `translate(${activeTransform.x} ${activeTransform.y})`;\n                    this._rootElement.setAttribute('transform', appliedTransform);\n                }\n            }\n            // Since this event gets fired for every pixel while dragging, we only\n            // want to fire it if the consumer opted into it. Also we have to\n            // re-enter the zone because we run all of the events on the outside.\n            if (this._moveEvents.observers.length) {\n                this._ngZone.run((/**\n                 * @return {?}\n                 */\n                () => {\n                    this._moveEvents.next({\n                        source: this,\n                        pointerPosition: constrainedPointerPosition,\n                        event,\n                        distance: this._getDragDistance(constrainedPointerPosition),\n                        delta: this._pointerDirectionDelta\n                    });\n                }));\n            }\n        });\n        /**\n         * Handler that is invoked when the user lifts their pointer up, after initiating a drag.\n         */\n        this._pointerUp = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            this._endDragSequence(event);\n        });\n        this.withRootElement(element);\n        _dragDropRegistry.registerDragItem(this);\n    }\n    /**\n     * Whether starting to drag this element is disabled.\n     * @return {?}\n     */\n    get disabled() {\n        return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        /** @type {?} */\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._toggleNativeDragInteractions();\n        }\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     * @return {?}\n     */\n    getPlaceholderElement() {\n        return this._placeholder;\n    }\n    /**\n     * Returns the root draggable element.\n     * @return {?}\n     */\n    getRootElement() {\n        return this._rootElement;\n    }\n    /**\n     * Registers the handles that can be used to drag the element.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} handles\n     * @return {THIS}\n     */\n    withHandles(handles) {\n        (/** @type {?} */ (this))._handles = handles.map((/**\n         * @param {?} handle\n         * @return {?}\n         */\n        handle => coerceElement(handle)));\n        (/** @type {?} */ (this))._handles.forEach((/**\n         * @param {?} handle\n         * @return {?}\n         */\n        handle => toggleNativeDragInteractions(handle, false)));\n        (/** @type {?} */ (this))._toggleNativeDragInteractions();\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Registers the template that should be used for the drag preview.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} template Template that from which to stamp out the preview.\n     * @return {THIS}\n     */\n    withPreviewTemplate(template) {\n        (/** @type {?} */ (this))._previewTemplate = template;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Registers the template that should be used for the drag placeholder.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} template Template that from which to stamp out the placeholder.\n     * @return {THIS}\n     */\n    withPlaceholderTemplate(template) {\n        (/** @type {?} */ (this))._placeholderTemplate = template;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} rootElement\n     * @return {THIS}\n     */\n    withRootElement(rootElement) {\n        /** @type {?} */\n        const element = coerceElement(rootElement);\n        if (element !== (/** @type {?} */ (this))._rootElement) {\n            if ((/** @type {?} */ (this))._rootElement) {\n                (/** @type {?} */ (this))._removeRootElementListeners((/** @type {?} */ (this))._rootElement);\n            }\n            element.addEventListener('mousedown', (/** @type {?} */ (this))._pointerDown, activeEventListenerOptions);\n            element.addEventListener('touchstart', (/** @type {?} */ (this))._pointerDown, passiveEventListenerOptions);\n            (/** @type {?} */ (this))._initialTransform = undefined;\n            (/** @type {?} */ (this))._rootElement = element;\n        }\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Element to which the draggable's position will be constrained.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} boundaryElement\n     * @return {THIS}\n     */\n    withBoundaryElement(boundaryElement) {\n        (/** @type {?} */ (this))._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n        (/** @type {?} */ (this))._resizeSubscription.unsubscribe();\n        if (boundaryElement) {\n            (/** @type {?} */ (this))._resizeSubscription = (/** @type {?} */ (this))._viewportRuler\n                .change(10)\n                .subscribe((/**\n             * @return {?}\n             */\n            () => (/** @type {?} */ (this))._containInsideBoundaryOnResize()));\n        }\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Removes the dragging functionality from the DOM element.\n     * @return {?}\n     */\n    dispose() {\n        this._removeRootElementListeners(this._rootElement);\n        // Do this check before removing from the registry since it'll\n        // stop being considered as dragged once it is removed.\n        if (this.isDragging()) {\n            // Since we move out the element to the end of the body while it's being\n            // dragged, we have to make sure that it's removed if it gets destroyed.\n            removeElement(this._rootElement);\n        }\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._dragDropRegistry.removeDragItem(this);\n        this._removeSubscriptions();\n        this.beforeStarted.complete();\n        this.started.complete();\n        this.released.complete();\n        this.ended.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this._moveEvents.complete();\n        this._handles = [];\n        this._disabledHandles.clear();\n        this._dropContainer = undefined;\n        this._boundaryElement = this._rootElement = this._placeholderTemplate =\n            this._previewTemplate = this._nextSibling = (/** @type {?} */ (null));\n    }\n    /**\n     * Checks whether the element is currently being dragged.\n     * @return {?}\n     */\n    isDragging() {\n        return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n    }\n    /**\n     * Resets a standalone drag item to its initial position.\n     * @return {?}\n     */\n    reset() {\n        this._rootElement.style.transform = this._initialTransform || '';\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform = { x: 0, y: 0 };\n    }\n    /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param {?} handle Handle element that should be disabled.\n     * @return {?}\n     */\n    disableHandle(handle) {\n        if (this._handles.indexOf(handle) > -1) {\n            this._disabledHandles.add(handle);\n        }\n    }\n    /**\n     * Enables a handle, if it has been disabled.\n     * @param {?} handle Handle element to be enabled.\n     * @return {?}\n     */\n    enableHandle(handle) {\n        this._disabledHandles.delete(handle);\n    }\n    /**\n     * Sets the layout direction of the draggable item.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} direction\n     * @return {THIS}\n     */\n    withDirection(direction) {\n        (/** @type {?} */ (this))._direction = direction;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the container that the item is part of.\n     * @param {?} container\n     * @return {?}\n     */\n    _withDropContainer(container) {\n        this._dropContainer = container;\n    }\n    /**\n     * Gets the current position in pixels the draggable outside of a drop container.\n     * @return {?}\n     */\n    getFreeDragPosition() {\n        /** @type {?} */\n        const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n        return { x: position.x, y: position.y };\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} value New position to be set.\n     * @return {THIS}\n     */\n    setFreeDragPosition(value) {\n        (/** @type {?} */ (this))._activeTransform = { x: 0, y: 0 };\n        (/** @type {?} */ (this))._passiveTransform.x = value.x;\n        (/** @type {?} */ (this))._passiveTransform.y = value.y;\n        if (!(/** @type {?} */ (this))._dropContainer) {\n            (/** @type {?} */ (this))._applyRootElementTransform(value.x, value.y);\n        }\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Updates the item's sort order based on the last-known pointer position.\n     * @return {?}\n     */\n    _sortFromLastPointerPosition() {\n        /** @type {?} */\n        const position = this._pointerPositionAtLastDirectionChange;\n        if (position && this._dropContainer) {\n            this._updateActiveDropContainer(position);\n        }\n    }\n    /**\n     * Unsubscribes from the global subscriptions.\n     * @private\n     * @return {?}\n     */\n    _removeSubscriptions() {\n        this._pointerMoveSubscription.unsubscribe();\n        this._pointerUpSubscription.unsubscribe();\n        this._scrollSubscription.unsubscribe();\n    }\n    /**\n     * Destroys the preview element and its ViewRef.\n     * @private\n     * @return {?}\n     */\n    _destroyPreview() {\n        if (this._preview) {\n            removeElement(this._preview);\n        }\n        if (this._previewRef) {\n            this._previewRef.destroy();\n        }\n        this._preview = this._previewRef = (/** @type {?} */ (null));\n    }\n    /**\n     * Destroys the placeholder element and its ViewRef.\n     * @private\n     * @return {?}\n     */\n    _destroyPlaceholder() {\n        if (this._placeholder) {\n            removeElement(this._placeholder);\n        }\n        if (this._placeholderRef) {\n            this._placeholderRef.destroy();\n        }\n        this._placeholder = this._placeholderRef = (/** @type {?} */ (null));\n    }\n    /**\n     * Clears subscriptions and stops the dragging sequence.\n     * @private\n     * @param {?} event Browser event object that ended the sequence.\n     * @return {?}\n     */\n    _endDragSequence(event) {\n        // Note that here we use `isDragging` from the service, rather than from `this`.\n        // The difference is that the one from the service reflects whether a dragging sequence\n        // has been initiated, whereas the one on `this` includes whether the user has passed\n        // the minimum dragging threshold.\n        if (!this._dragDropRegistry.isDragging(this)) {\n            return;\n        }\n        this._removeSubscriptions();\n        this._dragDropRegistry.stopDragging(this);\n        this._toggleNativeDragInteractions();\n        if (this._handles) {\n            this._rootElement.style.webkitTapHighlightColor = this._rootElementTapHighlight;\n        }\n        if (!this._hasStartedDragging) {\n            return;\n        }\n        this.released.next({ source: this });\n        if (this._dropContainer) {\n            // Stop scrolling immediately, instead of waiting for the animation to finish.\n            this._dropContainer._stopScrolling();\n            this._animatePreviewToPlaceholder().then((/**\n             * @return {?}\n             */\n            () => {\n                this._cleanupDragArtifacts(event);\n                this._cleanupCachedDimensions();\n                this._dragDropRegistry.stopDragging(this);\n            }));\n        }\n        else {\n            // Convert the active transform into a passive one. This means that next time\n            // the user starts dragging the item, its position will be calculated relatively\n            // to the new passive transform.\n            this._passiveTransform.x = this._activeTransform.x;\n            this._passiveTransform.y = this._activeTransform.y;\n            this._ngZone.run((/**\n             * @return {?}\n             */\n            () => {\n                this.ended.next({\n                    source: this,\n                    distance: this._getDragDistance(this._getPointerPositionOnPage(event))\n                });\n            }));\n            this._cleanupCachedDimensions();\n            this._dragDropRegistry.stopDragging(this);\n        }\n    }\n    /**\n     * Starts the dragging sequence.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _startDragSequence(event) {\n        // Emit the event on the item before the one on the container.\n        this.started.next({ source: this });\n        if (isTouchEvent(event)) {\n            this._lastTouchEventTime = Date.now();\n        }\n        this._toggleNativeDragInteractions();\n        if (this._dropContainer) {\n            /** @type {?} */\n            const element = this._rootElement;\n            // Grab the `nextSibling` before the preview and placeholder\n            // have been created so we don't get the preview by accident.\n            this._nextSibling = element.nextSibling;\n            /** @type {?} */\n            const preview = this._preview = this._createPreviewElement();\n            /** @type {?} */\n            const placeholder = this._placeholder = this._createPlaceholderElement();\n            // We move the element out at the end of the body and we make it hidden, because keeping it in\n            // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n            // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n            element.style.display = 'none';\n            this._document.body.appendChild((/** @type {?} */ (element.parentNode)).replaceChild(placeholder, element));\n            getPreviewInsertionPoint(this._document).appendChild(preview);\n            this._dropContainer.start();\n        }\n    }\n    /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @private\n     * @param {?} referenceElement Element that started the drag sequence.\n     * @param {?} event Browser event object that started the sequence.\n     * @return {?}\n     */\n    _initializeDragSequence(referenceElement, event) {\n        // Always stop propagation for the event that initializes\n        // the dragging sequence, in order to prevent it from potentially\n        // starting another sequence for a draggable parent somewhere up the DOM tree.\n        event.stopPropagation();\n        /** @type {?} */\n        const isDragging = this.isDragging();\n        /** @type {?} */\n        const isTouchSequence = isTouchEvent(event);\n        /** @type {?} */\n        const isAuxiliaryMouseButton = !isTouchSequence && ((/** @type {?} */ (event))).button !== 0;\n        /** @type {?} */\n        const rootElement = this._rootElement;\n        /** @type {?} */\n        const isSyntheticEvent = !isTouchSequence && this._lastTouchEventTime &&\n            this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n        // If the event started from an element with the native HTML drag&drop, it'll interfere\n        // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n        // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n        // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n        // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n        // events from firing on touch devices.\n        if (event.target && ((/** @type {?} */ (event.target))).draggable && event.type === 'mousedown') {\n            event.preventDefault();\n        }\n        // Abort if the user is already dragging or is using a mouse button other than the primary one.\n        if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent) {\n            return;\n        }\n        // If we've got handles, we need to disable the tap highlight on the entire root element,\n        // otherwise iOS will still add it, even though all the drag interactions on the handle\n        // are disabled.\n        if (this._handles.length) {\n            this._rootElementTapHighlight = rootElement.style.webkitTapHighlightColor;\n            rootElement.style.webkitTapHighlightColor = 'transparent';\n        }\n        this._hasStartedDragging = this._hasMoved = false;\n        this._initialContainer = (/** @type {?} */ (this._dropContainer));\n        // Avoid multiple subscriptions and memory leaks when multi touch\n        // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n        this._removeSubscriptions();\n        this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n        this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n        this._scrollSubscription = this._dragDropRegistry.scroll.pipe(startWith(null)).subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._scrollPosition = this._viewportRuler.getViewportScrollPosition();\n        }));\n        if (this._boundaryElement) {\n            this._boundaryRect = this._boundaryElement.getBoundingClientRect();\n        }\n        // If we have a custom preview template, the element won't be visible anyway so we avoid the\n        // extra `getBoundingClientRect` calls and just move the preview next to the cursor.\n        this._pickupPositionInElement = this._previewTemplate && this._previewTemplate.template ?\n            { x: 0, y: 0 } :\n            this._getPointerPositionInElement(referenceElement, event);\n        /** @type {?} */\n        const pointerPosition = this._pickupPositionOnPage = this._getPointerPositionOnPage(event);\n        this._pointerDirectionDelta = { x: 0, y: 0 };\n        this._pointerPositionAtLastDirectionChange = { x: pointerPosition.x, y: pointerPosition.y };\n        this._dragStartTime = Date.now();\n        this._dragDropRegistry.startDragging(this, event);\n    }\n    /**\n     * Cleans up the DOM artifacts that were added to facilitate the element being dragged.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _cleanupDragArtifacts(event) {\n        // Restore the element's visibility and insert it at its old position in the DOM.\n        // It's important that we maintain the position, because moving the element around in the DOM\n        // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n        // while moving the existing elements in all other cases.\n        this._rootElement.style.display = '';\n        if (this._nextSibling) {\n            (/** @type {?} */ (this._nextSibling.parentNode)).insertBefore(this._rootElement, this._nextSibling);\n        }\n        else {\n            coerceElement(this._initialContainer.element).appendChild(this._rootElement);\n        }\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._boundaryRect = this._previewRect = undefined;\n        // Re-enter the NgZone since we bound `document` events on the outside.\n        this._ngZone.run((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const container = (/** @type {?} */ (this._dropContainer));\n            /** @type {?} */\n            const currentIndex = container.getItemIndex(this);\n            /** @type {?} */\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            /** @type {?} */\n            const distance = this._getDragDistance(this._getPointerPositionOnPage(event));\n            /** @type {?} */\n            const isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n            this.ended.next({ source: this, distance });\n            this.dropped.next({\n                item: this,\n                currentIndex,\n                previousIndex: this._initialContainer.getItemIndex(this),\n                container: container,\n                previousContainer: this._initialContainer,\n                isPointerOverContainer,\n                distance\n            });\n            container.drop(this, currentIndex, this._initialContainer, isPointerOverContainer, distance);\n            this._dropContainer = this._initialContainer;\n        }));\n    }\n    /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     * @private\n     * @param {?} __0\n     * @return {?}\n     */\n    _updateActiveDropContainer({ x, y }) {\n        // Drop container that draggable has been moved into.\n        /** @type {?} */\n        let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n        // If we couldn't find a new container to move the item into, and the item has left its\n        // initial container, check whether the it's over the initial container. This handles the\n        // case where two containers are connected one way and the user tries to undo dragging an\n        // item into a new container.\n        if (!newContainer && this._dropContainer !== this._initialContainer &&\n            this._initialContainer._isOverContainer(x, y)) {\n            newContainer = this._initialContainer;\n        }\n        if (newContainer && newContainer !== this._dropContainer) {\n            this._ngZone.run((/**\n             * @return {?}\n             */\n            () => {\n                // Notify the old container that the item has left.\n                this.exited.next({ item: this, container: (/** @type {?} */ (this._dropContainer)) });\n                (/** @type {?} */ (this._dropContainer)).exit(this);\n                // Notify the new container that the item has entered.\n                this._dropContainer = (/** @type {?} */ (newContainer));\n                this._dropContainer.enter(this, x, y);\n                this.entered.next({\n                    item: this,\n                    container: (/** @type {?} */ (newContainer)),\n                    currentIndex: (/** @type {?} */ (newContainer)).getItemIndex(this)\n                });\n            }));\n        }\n        (/** @type {?} */ (this._dropContainer))._startScrollingIfNecessary(x, y);\n        (/** @type {?} */ (this._dropContainer))._sortItem(this, x, y, this._pointerDirectionDelta);\n        this._preview.style.transform =\n            getTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n    }\n    /**\n     * Creates the element that will be rendered next to the user's pointer\n     * and will be used as a preview of the element that is being dragged.\n     * @private\n     * @return {?}\n     */\n    _createPreviewElement() {\n        /** @type {?} */\n        const previewConfig = this._previewTemplate;\n        /** @type {?} */\n        const previewTemplate = previewConfig ? previewConfig.template : null;\n        /** @type {?} */\n        let preview;\n        if (previewTemplate) {\n            /** @type {?} */\n            const viewRef = (/** @type {?} */ (previewConfig)).viewContainer.createEmbeddedView(previewTemplate, (/** @type {?} */ (previewConfig)).context);\n            preview = getRootNode(viewRef, this._document);\n            this._previewRef = viewRef;\n            preview.style.transform =\n                getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n        }\n        else {\n            /** @type {?} */\n            const element = this._rootElement;\n            /** @type {?} */\n            const elementRect = element.getBoundingClientRect();\n            preview = deepCloneNode(element);\n            preview.style.width = `${elementRect.width}px`;\n            preview.style.height = `${elementRect.height}px`;\n            preview.style.transform = getTransform(elementRect.left, elementRect.top);\n        }\n        extendStyles(preview.style, {\n            // It's important that we disable the pointer events on the preview, because\n            // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n            pointerEvents: 'none',\n            // We have to reset the margin, because can throw off positioning relative to the viewport.\n            margin: '0',\n            position: 'fixed',\n            top: '0',\n            left: '0',\n            zIndex: '1000'\n        });\n        toggleNativeDragInteractions(preview, false);\n        preview.classList.add('cdk-drag-preview');\n        preview.setAttribute('dir', this._direction);\n        return preview;\n    }\n    /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @private\n     * @return {?} Promise that resolves when the animation completes.\n     */\n    _animatePreviewToPlaceholder() {\n        // If the user hasn't moved yet, the transitionend event won't fire.\n        if (!this._hasMoved) {\n            return Promise.resolve();\n        }\n        /** @type {?} */\n        const placeholderRect = this._placeholder.getBoundingClientRect();\n        // Apply the class that adds a transition to the preview.\n        this._preview.classList.add('cdk-drag-animating');\n        // Move the preview to the placeholder position.\n        this._preview.style.transform = getTransform(placeholderRect.left, placeholderRect.top);\n        // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n        // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n        // apply its style, we take advantage of the available info to figure out whether we need to\n        // bind the event in the first place.\n        /** @type {?} */\n        const duration = getTransformTransitionDurationInMs(this._preview);\n        if (duration === 0) {\n            return Promise.resolve();\n        }\n        return this._ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            return new Promise((/**\n             * @param {?} resolve\n             * @return {?}\n             */\n            resolve => {\n                /** @type {?} */\n                const handler = (/** @type {?} */ (((/**\n                 * @param {?} event\n                 * @return {?}\n                 */\n                (event) => {\n                    if (!event || (event.target === this._preview && event.propertyName === 'transform')) {\n                        this._preview.removeEventListener('transitionend', handler);\n                        resolve();\n                        clearTimeout(timeout);\n                    }\n                }))));\n                // If a transition is short enough, the browser might not fire the `transitionend` event.\n                // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n                // fire if the transition hasn't completed when it was supposed to.\n                /** @type {?} */\n                const timeout = setTimeout((/** @type {?} */ (handler)), duration * 1.5);\n                this._preview.addEventListener('transitionend', handler);\n            }));\n        }));\n    }\n    /**\n     * Creates an element that will be shown instead of the current element while dragging.\n     * @private\n     * @return {?}\n     */\n    _createPlaceholderElement() {\n        /** @type {?} */\n        const placeholderConfig = this._placeholderTemplate;\n        /** @type {?} */\n        const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n        /** @type {?} */\n        let placeholder;\n        if (placeholderTemplate) {\n            this._placeholderRef = (/** @type {?} */ (placeholderConfig)).viewContainer.createEmbeddedView(placeholderTemplate, (/** @type {?} */ (placeholderConfig)).context);\n            placeholder = getRootNode(this._placeholderRef, this._document);\n        }\n        else {\n            placeholder = deepCloneNode(this._rootElement);\n        }\n        placeholder.classList.add('cdk-drag-placeholder');\n        return placeholder;\n    }\n    /**\n     * Figures out the coordinates at which an element was picked up.\n     * @private\n     * @param {?} referenceElement Element that initiated the dragging.\n     * @param {?} event Event that initiated the dragging.\n     * @return {?}\n     */\n    _getPointerPositionInElement(referenceElement, event) {\n        /** @type {?} */\n        const elementRect = this._rootElement.getBoundingClientRect();\n        /** @type {?} */\n        const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n        /** @type {?} */\n        const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n        /** @type {?} */\n        const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n        /** @type {?} */\n        const x = point.pageX - referenceRect.left - this._scrollPosition.left;\n        /** @type {?} */\n        const y = point.pageY - referenceRect.top - this._scrollPosition.top;\n        return {\n            x: referenceRect.left - elementRect.left + x,\n            y: referenceRect.top - elementRect.top + y\n        };\n    }\n    /**\n     * Determines the point of the page that was touched by the user.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _getPointerPositionOnPage(event) {\n        // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n        /** @type {?} */\n        const point = isTouchEvent(event) ? (event.touches[0] || event.changedTouches[0]) : event;\n        return {\n            x: point.pageX - this._scrollPosition.left,\n            y: point.pageY - this._scrollPosition.top\n        };\n    }\n    /**\n     * Gets the pointer position on the page, accounting for any position constraints.\n     * @private\n     * @param {?} event\n     * @return {?}\n     */\n    _getConstrainedPointerPosition(event) {\n        /** @type {?} */\n        const point = this._getPointerPositionOnPage(event);\n        /** @type {?} */\n        const constrainedPoint = this.constrainPosition ? this.constrainPosition(point, this) : point;\n        /** @type {?} */\n        const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n        if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n            constrainedPoint.y = this._pickupPositionOnPage.y;\n        }\n        else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n            constrainedPoint.x = this._pickupPositionOnPage.x;\n        }\n        if (this._boundaryRect) {\n            const { x: pickupX, y: pickupY } = this._pickupPositionInElement;\n            /** @type {?} */\n            const boundaryRect = this._boundaryRect;\n            /** @type {?} */\n            const previewRect = (/** @type {?} */ (this._previewRect));\n            /** @type {?} */\n            const minY = boundaryRect.top + pickupY;\n            /** @type {?} */\n            const maxY = boundaryRect.bottom - (previewRect.height - pickupY);\n            /** @type {?} */\n            const minX = boundaryRect.left + pickupX;\n            /** @type {?} */\n            const maxX = boundaryRect.right - (previewRect.width - pickupX);\n            constrainedPoint.x = clamp(constrainedPoint.x, minX, maxX);\n            constrainedPoint.y = clamp(constrainedPoint.y, minY, maxY);\n        }\n        return constrainedPoint;\n    }\n    /**\n     * Updates the current drag delta, based on the user's current pointer position on the page.\n     * @private\n     * @param {?} pointerPositionOnPage\n     * @return {?}\n     */\n    _updatePointerDirectionDelta(pointerPositionOnPage) {\n        const { x, y } = pointerPositionOnPage;\n        /** @type {?} */\n        const delta = this._pointerDirectionDelta;\n        /** @type {?} */\n        const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n        // Amount of pixels the user has dragged since the last time the direction changed.\n        /** @type {?} */\n        const changeX = Math.abs(x - positionSinceLastChange.x);\n        /** @type {?} */\n        const changeY = Math.abs(y - positionSinceLastChange.y);\n        // Because we handle pointer events on a per-pixel basis, we don't want the delta\n        // to change for every pixel, otherwise anything that depends on it can look erratic.\n        // To make the delta more consistent, we track how much the user has moved since the last\n        // delta change and we only update it after it has reached a certain threshold.\n        if (changeX > this._config.pointerDirectionChangeThreshold) {\n            delta.x = x > positionSinceLastChange.x ? 1 : -1;\n            positionSinceLastChange.x = x;\n        }\n        if (changeY > this._config.pointerDirectionChangeThreshold) {\n            delta.y = y > positionSinceLastChange.y ? 1 : -1;\n            positionSinceLastChange.y = y;\n        }\n        return delta;\n    }\n    /**\n     * Toggles the native drag interactions, based on how many handles are registered.\n     * @private\n     * @return {?}\n     */\n    _toggleNativeDragInteractions() {\n        if (!this._rootElement || !this._handles) {\n            return;\n        }\n        /** @type {?} */\n        const shouldEnable = this._handles.length > 0 || !this.isDragging();\n        if (shouldEnable !== this._nativeInteractionsEnabled) {\n            this._nativeInteractionsEnabled = shouldEnable;\n            toggleNativeDragInteractions(this._rootElement, shouldEnable);\n        }\n    }\n    /**\n     * Removes the manually-added event listeners from the root element.\n     * @private\n     * @param {?} element\n     * @return {?}\n     */\n    _removeRootElementListeners(element) {\n        element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n        element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n    }\n    /**\n     * Applies a `transform` to the root element, taking into account any existing transforms on it.\n     * @private\n     * @param {?} x New transform value along the X axis.\n     * @param {?} y New transform value along the Y axis.\n     * @return {?}\n     */\n    _applyRootElementTransform(x, y) {\n        /** @type {?} */\n        const transform = getTransform(x, y);\n        // Cache the previous transform amount only after the first drag sequence, because\n        // we don't want our own transforms to stack on top of each other.\n        if (this._initialTransform == null) {\n            this._initialTransform = this._rootElement.style.transform || '';\n        }\n        // Preserve the previous `transform` value, if there was one. Note that we apply our own\n        // transform before the user's, because things like rotation can affect which direction\n        // the element will be translated towards.\n        this._rootElement.style.transform = this._initialTransform ?\n            transform + ' ' + this._initialTransform : transform;\n    }\n    /**\n     * Gets the distance that the user has dragged during the current drag sequence.\n     * @private\n     * @param {?} currentPosition Current position of the user's pointer.\n     * @return {?}\n     */\n    _getDragDistance(currentPosition) {\n        /** @type {?} */\n        const pickupPosition = this._pickupPositionOnPage;\n        if (pickupPosition) {\n            return { x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y };\n        }\n        return { x: 0, y: 0 };\n    }\n    /**\n     * Cleans up any cached element dimensions that we don't need after dragging has stopped.\n     * @private\n     * @return {?}\n     */\n    _cleanupCachedDimensions() {\n        this._boundaryRect = this._previewRect = undefined;\n    }\n    /**\n     * Checks whether the element is still inside its boundary after the viewport has been resized.\n     * If not, the position is adjusted so that the element fits again.\n     * @private\n     * @return {?}\n     */\n    _containInsideBoundaryOnResize() {\n        let { x, y } = this._passiveTransform;\n        if ((x === 0 && y === 0) || this.isDragging() || !this._boundaryElement) {\n            return;\n        }\n        /** @type {?} */\n        const boundaryRect = this._boundaryElement.getBoundingClientRect();\n        /** @type {?} */\n        const elementRect = this._rootElement.getBoundingClientRect();\n        /** @type {?} */\n        const leftOverflow = boundaryRect.left - elementRect.left;\n        /** @type {?} */\n        const rightOverflow = elementRect.right - boundaryRect.right;\n        /** @type {?} */\n        const topOverflow = boundaryRect.top - elementRect.top;\n        /** @type {?} */\n        const bottomOverflow = elementRect.bottom - boundaryRect.bottom;\n        // If the element has become wider than the boundary, we can't\n        // do much to make it fit so we just anchor it to the left.\n        if (boundaryRect.width > elementRect.width) {\n            if (leftOverflow > 0) {\n                x += leftOverflow;\n            }\n            if (rightOverflow > 0) {\n                x -= rightOverflow;\n            }\n        }\n        else {\n            x = 0;\n        }\n        // If the element has become taller than the boundary, we can't\n        // do much to make it fit so we just anchor it to the top.\n        if (boundaryRect.height > elementRect.height) {\n            if (topOverflow > 0) {\n                y += topOverflow;\n            }\n            if (bottomOverflow > 0) {\n                y -= bottomOverflow;\n            }\n        }\n        else {\n            y = 0;\n        }\n        if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n            this.setFreeDragPosition({ y, x });\n        }\n    }\n}\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param {?} x Desired position of the element along the X axis.\n * @param {?} y Desired position of the element along the Y axis.\n * @return {?}\n */\nfunction getTransform(x, y) {\n    // Round the transforms since some browsers will\n    // blur the elements for sub-pixel transforms.\n    return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n/**\n * Creates a deep clone of an element.\n * @param {?} node\n * @return {?}\n */\nfunction deepCloneNode(node) {\n    /** @type {?} */\n    const clone = (/** @type {?} */ (node.cloneNode(true)));\n    /** @type {?} */\n    const descendantsWithId = clone.querySelectorAll('[id]');\n    /** @type {?} */\n    const descendantCanvases = node.querySelectorAll('canvas');\n    // Remove the `id` to avoid having multiple elements with the same id on the page.\n    clone.removeAttribute('id');\n    for (let i = 0; i < descendantsWithId.length; i++) {\n        descendantsWithId[i].removeAttribute('id');\n    }\n    // `cloneNode` won't transfer the content of `canvas` elements so we have to do it ourselves.\n    // We match up the cloned canvas to their sources using their index in the DOM.\n    if (descendantCanvases.length) {\n        /** @type {?} */\n        const cloneCanvases = clone.querySelectorAll('canvas');\n        for (let i = 0; i < descendantCanvases.length; i++) {\n            /** @type {?} */\n            const correspondingCloneContext = cloneCanvases[i].getContext('2d');\n            if (correspondingCloneContext) {\n                correspondingCloneContext.drawImage(descendantCanvases[i], 0, 0);\n            }\n        }\n    }\n    return clone;\n}\n/**\n * Clamps a value between a minimum and a maximum.\n * @param {?} value\n * @param {?} min\n * @param {?} max\n * @return {?}\n */\nfunction clamp(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/**\n * Helper to remove an element from the DOM and to do all the necessary null checks.\n * @param {?} element Element to be removed.\n * @return {?}\n */\nfunction removeElement(element) {\n    if (element && element.parentNode) {\n        element.parentNode.removeChild(element);\n    }\n}\n/**\n * Determines whether an event is a touch event.\n * @param {?} event\n * @return {?}\n */\nfunction isTouchEvent(event) {\n    // This function is called for every pixel that the user has dragged so we need it to be\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\n    // that if the event's name starts with `t`, it's a touch event.\n    return event.type[0] === 't';\n}\n/**\n * Gets the element into which the drag preview should be inserted.\n * @param {?} documentRef\n * @return {?}\n */\nfunction getPreviewInsertionPoint(documentRef) {\n    // We can't use the body if the user is in fullscreen mode,\n    // because the preview will render under the fullscreen element.\n    // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n    return documentRef.fullscreenElement ||\n        documentRef.webkitFullscreenElement ||\n        documentRef.mozFullScreenElement ||\n        documentRef.msFullscreenElement ||\n        documentRef.body;\n}\n/**\n * Gets the root HTML element of an embedded view.\n * If the root is not an HTML element it gets wrapped in one.\n * @param {?} viewRef\n * @param {?} _document\n * @return {?}\n */\nfunction getRootNode(viewRef, _document) {\n    /** @type {?} */\n    const rootNode = viewRef.rootNodes[0];\n    if (rootNode.nodeType !== _document.ELEMENT_NODE) {\n        /** @type {?} */\n        const wrapper = _document.createElement('div');\n        wrapper.appendChild(rootNode);\n        return wrapper;\n    }\n    return (/** @type {?} */ (rootNode));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Moves an item one index in an array to another.\n * @template T\n * @param {?} array Array in which to move the item.\n * @param {?} fromIndex Starting index of the item.\n * @param {?} toIndex Index to which the item should be moved.\n * @return {?}\n */\nfunction moveItemInArray(array, fromIndex, toIndex) {\n    /** @type {?} */\n    const from = clamp$1(fromIndex, array.length - 1);\n    /** @type {?} */\n    const to = clamp$1(toIndex, array.length - 1);\n    if (from === to) {\n        return;\n    }\n    /** @type {?} */\n    const target = array[from];\n    /** @type {?} */\n    const delta = to < from ? -1 : 1;\n    for (let i = from; i !== to; i += delta) {\n        array[i] = array[i + delta];\n    }\n    array[to] = target;\n}\n/**\n * Moves an item from one array to another.\n * @template T\n * @param {?} currentArray Array from which to transfer the item.\n * @param {?} targetArray Array into which to put the item.\n * @param {?} currentIndex Index of the item in its current array.\n * @param {?} targetIndex Index at which to insert the item.\n * @return {?}\n */\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    /** @type {?} */\n    const from = clamp$1(currentIndex, currentArray.length - 1);\n    /** @type {?} */\n    const to = clamp$1(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n    }\n}\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @template T\n * @param {?} currentArray Array from which to copy the item.\n * @param {?} targetArray Array into which is copy the item.\n * @param {?} currentIndex Index of the item in its current array.\n * @param {?} targetIndex Index at which to insert the item.\n *\n * @return {?}\n */\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    /** @type {?} */\n    const to = clamp$1(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray[currentIndex]);\n    }\n}\n/**\n * Clamps a number between zero and a maximum.\n * @param {?} value\n * @param {?} max\n * @return {?}\n */\nfunction clamp$1(value, max) {\n    return Math.max(0, Math.min(max, value));\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Counter used to generate unique ids for drop refs.\n * @type {?}\n */\nlet _uniqueIdCounter = 0;\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n * @type {?}\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n * @type {?}\n */\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Number of pixels to scroll for each frame when auto-scrolling an element.\n * The value comes from trying it out manually until it feels right.\n * @type {?}\n */\nconst AUTO_SCROLL_STEP = 2;\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n * \\@docs-private\n * @template T\n */\nclass DropListRef {\n    /**\n     * @param {?} element\n     * @param {?} _dragDropRegistry\n     * @param {?} _document\n     * @param {?=} _ngZone\n     * @param {?=} _viewportRuler\n     */\n    constructor(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n        this._dragDropRegistry = _dragDropRegistry;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        /**\n         * Unique ID for the drop list.\n         * @deprecated No longer being used. To be removed.\n         * \\@breaking-change 8.0.0\n         */\n        this.id = `cdk-drop-list-ref-${_uniqueIdCounter++}`;\n        /**\n         * Whether starting a dragging sequence from this container is disabled.\n         */\n        this.disabled = false;\n        /**\n         * Whether sorting items within the list is disabled.\n         */\n        this.sortingDisabled = false;\n        /**\n         * Whether auto-scrolling the view when the user\n         * moves their pointer close to the edges is disabled.\n         */\n        this.autoScrollDisabled = false;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = (/**\n         * @return {?}\n         */\n        () => true);\n        /**\n         * Emits right before dragging has started.\n         */\n        this.beforeStarted = new Subject();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new Subject();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new Subject();\n        /**\n         * Emits when the user drops an item inside the container.\n         */\n        this.dropped = new Subject();\n        /**\n         * Emits as the user is swapping items while actively dragging.\n         */\n        this.sorted = new Subject();\n        /**\n         * Whether an item in the list is being dragged.\n         */\n        this._isDragging = false;\n        /**\n         * Cache of the dimensions of all the items inside the container.\n         */\n        this._itemPositions = [];\n        /**\n         * Keeps track of the container's scroll position.\n         */\n        this._scrollPosition = { top: 0, left: 0 };\n        /**\n         * Keeps track of the scroll position of the viewport.\n         */\n        this._viewportScrollPosition = { top: 0, left: 0 };\n        /**\n         * Keeps track of the item that was last swapped with the dragged item, as\n         * well as what direction the pointer was moving in when the swap occured.\n         */\n        this._previousSwap = { drag: (/** @type {?} */ (null)), delta: 0 };\n        /**\n         * Drop lists that are connected to the current one.\n         */\n        this._siblings = [];\n        /**\n         * Direction in which the list is oriented.\n         */\n        this._orientation = 'vertical';\n        /**\n         * Connected siblings that currently have a dragged item.\n         */\n        this._activeSiblings = new Set();\n        /**\n         * Layout direction of the drop list.\n         */\n        this._direction = 'ltr';\n        /**\n         * Subscription to the window being scrolled.\n         */\n        this._viewportScrollSubscription = Subscription.EMPTY;\n        /**\n         * Vertical direction in which the list is currently scrolling.\n         */\n        this._verticalScrollDirection = 0 /* NONE */;\n        /**\n         * Horizontal direction in which the list is currently scrolling.\n         */\n        this._horizontalScrollDirection = 0 /* NONE */;\n        /**\n         * Used to signal to the current auto-scroll sequence when to stop.\n         */\n        this._stopScrollTimers = new Subject();\n        /**\n         * Handles the container being scrolled. Has to be an arrow function to preserve the context.\n         */\n        this._handleScroll = (/**\n         * @return {?}\n         */\n        () => {\n            if (!this.isDragging()) {\n                return;\n            }\n            /** @type {?} */\n            const element = coerceElement(this.element);\n            this._updateAfterScroll(this._scrollPosition, element.scrollTop, element.scrollLeft);\n        });\n        /**\n         * Starts the interval that'll auto-scroll the element.\n         */\n        this._startScrollInterval = (/**\n         * @return {?}\n         */\n        () => {\n            this._stopScrolling();\n            interval(0, animationFrameScheduler)\n                .pipe(takeUntil(this._stopScrollTimers))\n                .subscribe((/**\n             * @return {?}\n             */\n            () => {\n                /** @type {?} */\n                const node = this._scrollNode;\n                if (this._verticalScrollDirection === 1 /* UP */) {\n                    incrementVerticalScroll(node, -AUTO_SCROLL_STEP);\n                }\n                else if (this._verticalScrollDirection === 2 /* DOWN */) {\n                    incrementVerticalScroll(node, AUTO_SCROLL_STEP);\n                }\n                if (this._horizontalScrollDirection === 1 /* LEFT */) {\n                    incrementHorizontalScroll(node, -AUTO_SCROLL_STEP);\n                }\n                else if (this._horizontalScrollDirection === 2 /* RIGHT */) {\n                    incrementHorizontalScroll(node, AUTO_SCROLL_STEP);\n                }\n            }));\n        });\n        /** @type {?} */\n        const nativeNode = this.element = coerceElement(element);\n        this._shadowRoot = getShadowRoot(nativeNode) || _document;\n        _dragDropRegistry.registerDropContainer(this);\n    }\n    /**\n     * Removes the drop list functionality from the DOM element.\n     * @return {?}\n     */\n    dispose() {\n        this._stopScrolling();\n        this._stopScrollTimers.complete();\n        this._removeListeners();\n        this.beforeStarted.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this.sorted.complete();\n        this._activeSiblings.clear();\n        this._scrollNode = (/** @type {?} */ (null));\n        this._dragDropRegistry.removeDropContainer(this);\n    }\n    /**\n     * Whether an item from this list is currently being dragged.\n     * @return {?}\n     */\n    isDragging() {\n        return this._isDragging;\n    }\n    /**\n     * Starts dragging an item.\n     * @return {?}\n     */\n    start() {\n        /** @type {?} */\n        const element = coerceElement(this.element);\n        this.beforeStarted.next();\n        this._isDragging = true;\n        this._cacheItems();\n        this._siblings.forEach((/**\n         * @param {?} sibling\n         * @return {?}\n         */\n        sibling => sibling._startReceiving(this)));\n        this._removeListeners();\n        // @breaking-change 9.0.0 Remove check for _ngZone once it's marked as a required param.\n        if (this._ngZone) {\n            this._ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => element.addEventListener('scroll', this._handleScroll)));\n        }\n        else {\n            element.addEventListener('scroll', this._handleScroll);\n        }\n        // @breaking-change 9.0.0 Remove check for _viewportRuler once it's marked as a required param.\n        if (this._viewportRuler) {\n            this._listenToScrollEvents();\n        }\n    }\n    /**\n     * Emits an event to indicate that the user moved an item into the container.\n     * @param {?} item Item that was moved into the container.\n     * @param {?} pointerX Position of the item along the X axis.\n     * @param {?} pointerY Position of the item along the Y axis.\n     * @return {?}\n     */\n    enter(item, pointerX, pointerY) {\n        this.start();\n        // If sorting is disabled, we want the item to return to its starting\n        // position if the user is returning it to its initial container.\n        /** @type {?} */\n        let newIndex = this.sortingDisabled ? this._draggables.indexOf(item) : -1;\n        if (newIndex === -1) {\n            // We use the coordinates of where the item entered the drop\n            // zone to figure out at which index it should be inserted.\n            newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n        }\n        /** @type {?} */\n        const activeDraggables = this._activeDraggables;\n        /** @type {?} */\n        const currentIndex = activeDraggables.indexOf(item);\n        /** @type {?} */\n        const placeholder = item.getPlaceholderElement();\n        /** @type {?} */\n        let newPositionReference = activeDraggables[newIndex];\n        // If the item at the new position is the same as the item that is being dragged,\n        // it means that we're trying to restore the item to its initial position. In this\n        // case we should use the next item from the list as the reference.\n        if (newPositionReference === item) {\n            newPositionReference = activeDraggables[newIndex + 1];\n        }\n        // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n        // into another container and back again), we have to ensure that it isn't duplicated.\n        if (currentIndex > -1) {\n            activeDraggables.splice(currentIndex, 1);\n        }\n        // Don't use items that are being dragged as a reference, because\n        // their element has been moved down to the bottom of the body.\n        if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n            /** @type {?} */\n            const element = newPositionReference.getRootElement();\n            (/** @type {?} */ (element.parentElement)).insertBefore(placeholder, element);\n            activeDraggables.splice(newIndex, 0, item);\n        }\n        else {\n            coerceElement(this.element).appendChild(placeholder);\n            activeDraggables.push(item);\n        }\n        // The transform needs to be cleared so it doesn't throw off the measurements.\n        placeholder.style.transform = '';\n        // Note that the positions were already cached when we called `start` above,\n        // but we need to refresh them since the amount of items has changed.\n        this._cacheItemPositions();\n        this.entered.next({ item, container: this, currentIndex: this.getItemIndex(item) });\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param {?} item Item that was dragged out.\n     * @return {?}\n     */\n    exit(item) {\n        this._reset();\n        this.exited.next({ item, container: this });\n    }\n    /**\n     * Drops an item into this container.\n     * \\@breaking-change 9.0.0 `distance` parameter to become required.\n     * @param {?} item Item being dropped into the container.\n     * @param {?} currentIndex Index at which the item should be inserted.\n     * @param {?} previousContainer Container from which the item got dragged in.\n     * @param {?} isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @param {?=} distance Distance the user has dragged since the start of the dragging sequence.\n     * @return {?}\n     */\n    drop(item, currentIndex, previousContainer, isPointerOverContainer, distance = { x: 0, y: 0 }) {\n        this._reset();\n        this.dropped.next({\n            item,\n            currentIndex,\n            previousIndex: previousContainer.getItemIndex(item),\n            container: this,\n            previousContainer,\n            isPointerOverContainer,\n            distance\n        });\n    }\n    /**\n     * Sets the draggable items that are a part of this list.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} items Items that are a part of this list.\n     * @return {THIS}\n     */\n    withItems(items) {\n        (/** @type {?} */ (this))._draggables = items;\n        items.forEach((/**\n         * @param {?} item\n         * @return {?}\n         */\n        item => item._withDropContainer((/** @type {?} */ (this)))));\n        if ((/** @type {?} */ (this)).isDragging()) {\n            (/** @type {?} */ (this))._cacheItems();\n        }\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the layout direction of the drop list.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} direction\n     * @return {THIS}\n     */\n    withDirection(direction) {\n        (/** @type {?} */ (this))._direction = direction;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} connectedTo Other containers that the current containers should be connected to.\n     * @return {THIS}\n     */\n    connectedTo(connectedTo) {\n        (/** @type {?} */ (this))._siblings = connectedTo.slice();\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Sets the orientation of the container.\n     * @template THIS\n     * @this {THIS}\n     * @param {?} orientation New orientation for the container.\n     * @return {THIS}\n     */\n    withOrientation(orientation) {\n        (/** @type {?} */ (this))._orientation = orientation;\n        return (/** @type {?} */ (this));\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @param {?} item Item whose index should be determined.\n     * @return {?}\n     */\n    getItemIndex(item) {\n        if (!this._isDragging) {\n            return this._draggables.indexOf(item);\n        }\n        // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n        // The rest of the logic still stands no matter what orientation we're in, however\n        // we need to invert the array when determining the index.\n        /** @type {?} */\n        const items = this._orientation === 'horizontal' && this._direction === 'rtl' ?\n            this._itemPositions.slice().reverse() : this._itemPositions;\n        return findIndex(items, (/**\n         * @param {?} currentItem\n         * @return {?}\n         */\n        currentItem => currentItem.drag === item));\n    }\n    /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     * @return {?}\n     */\n    isReceiving() {\n        return this._activeSiblings.size > 0;\n    }\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param {?} item Item to be sorted.\n     * @param {?} pointerX Position of the item along the X axis.\n     * @param {?} pointerY Position of the item along the Y axis.\n     * @param {?} pointerDelta Direction in which the pointer is moving along each axis.\n     * @return {?}\n     */\n    _sortItem(item, pointerX, pointerY, pointerDelta) {\n        // Don't sort the item if sorting is disabled or it's out of range.\n        if (this.sortingDisabled || !this._isPointerNearDropContainer(pointerX, pointerY)) {\n            return;\n        }\n        /** @type {?} */\n        const siblings = this._itemPositions;\n        /** @type {?} */\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n        if (newIndex === -1 && siblings.length > 0) {\n            return;\n        }\n        /** @type {?} */\n        const isHorizontal = this._orientation === 'horizontal';\n        /** @type {?} */\n        const currentIndex = findIndex(siblings, (/**\n         * @param {?} currentItem\n         * @return {?}\n         */\n        currentItem => currentItem.drag === item));\n        /** @type {?} */\n        const siblingAtNewPosition = siblings[newIndex];\n        /** @type {?} */\n        const currentPosition = siblings[currentIndex].clientRect;\n        /** @type {?} */\n        const newPosition = siblingAtNewPosition.clientRect;\n        /** @type {?} */\n        const delta = currentIndex > newIndex ? 1 : -1;\n        this._previousSwap.drag = siblingAtNewPosition.drag;\n        this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n        // How many pixels the item's placeholder should be offset.\n        /** @type {?} */\n        const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n        // How many pixels all the other items should be offset.\n        /** @type {?} */\n        const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n        // Save the previous order of the items before moving the item to its new index.\n        // We use this to check whether an item has been moved as a result of the sorting.\n        /** @type {?} */\n        const oldOrder = siblings.slice();\n        // Shuffle the array in place.\n        moveItemInArray(siblings, currentIndex, newIndex);\n        this.sorted.next({\n            previousIndex: currentIndex,\n            currentIndex: newIndex,\n            container: this,\n            item\n        });\n        siblings.forEach((/**\n         * @param {?} sibling\n         * @param {?} index\n         * @return {?}\n         */\n        (sibling, index) => {\n            // Don't do anything if the position hasn't changed.\n            if (oldOrder[index] === sibling) {\n                return;\n            }\n            /** @type {?} */\n            const isDraggedItem = sibling.drag === item;\n            /** @type {?} */\n            const offset = isDraggedItem ? itemOffset : siblingOffset;\n            /** @type {?} */\n            const elementToOffset = isDraggedItem ? item.getPlaceholderElement() :\n                sibling.drag.getRootElement();\n            // Update the offset to reflect the new position.\n            sibling.offset += offset;\n            // Since we're moving the items with a `transform`, we need to adjust their cached\n            // client rects to reflect their new position, as well as swap their positions in the cache.\n            // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n            // elements may be mid-animation which will give us a wrong result.\n            if (isHorizontal) {\n                // Round the transforms since some browsers will\n                // blur the elements, for sub-pixel transforms.\n                elementToOffset.style.transform = `translate3d(${Math.round(sibling.offset)}px, 0, 0)`;\n                adjustClientRect(sibling.clientRect, 0, offset);\n            }\n            else {\n                elementToOffset.style.transform = `translate3d(0, ${Math.round(sibling.offset)}px, 0)`;\n                adjustClientRect(sibling.clientRect, offset, 0);\n            }\n        }));\n    }\n    /**\n     * Checks whether the user's pointer is close to the edges of either the\n     * viewport or the drop list and starts the auto-scroll sequence.\n     * @param {?} pointerX User's pointer position along the x axis.\n     * @param {?} pointerY User's pointer position along the y axis.\n     * @return {?}\n     */\n    _startScrollingIfNecessary(pointerX, pointerY) {\n        if (this.autoScrollDisabled) {\n            return;\n        }\n        /** @type {?} */\n        let scrollNode;\n        /** @type {?} */\n        let verticalScrollDirection = 0 /* NONE */;\n        /** @type {?} */\n        let horizontalScrollDirection = 0 /* NONE */;\n        // Check whether we should start scrolling the container.\n        if (this._isPointerNearDropContainer(pointerX, pointerY)) {\n            /** @type {?} */\n            const element = coerceElement(this.element);\n            [verticalScrollDirection, horizontalScrollDirection] =\n                getElementScrollDirections(element, this._clientRect, pointerX, pointerY);\n            if (verticalScrollDirection || horizontalScrollDirection) {\n                scrollNode = element;\n            }\n        }\n        // @breaking-change 9.0.0 Remove null check for _viewportRuler once it's a required parameter.\n        // Otherwise check if we can start scrolling the viewport.\n        if (this._viewportRuler && !verticalScrollDirection && !horizontalScrollDirection) {\n            const { width, height } = this._viewportRuler.getViewportSize();\n            /** @type {?} */\n            const clientRect = { width, height, top: 0, right: width, bottom: height, left: 0 };\n            verticalScrollDirection = getVerticalScrollDirection(clientRect, pointerY);\n            horizontalScrollDirection = getHorizontalScrollDirection(clientRect, pointerX);\n            scrollNode = window;\n        }\n        if (scrollNode && (verticalScrollDirection !== this._verticalScrollDirection ||\n            horizontalScrollDirection !== this._horizontalScrollDirection ||\n            scrollNode !== this._scrollNode)) {\n            this._verticalScrollDirection = verticalScrollDirection;\n            this._horizontalScrollDirection = horizontalScrollDirection;\n            this._scrollNode = scrollNode;\n            if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n                // @breaking-change 9.0.0 Remove null check for `_ngZone` once it is made required.\n                if (this._ngZone) {\n                    this._ngZone.runOutsideAngular(this._startScrollInterval);\n                }\n                else {\n                    this._startScrollInterval();\n                }\n            }\n            else {\n                this._stopScrolling();\n            }\n        }\n    }\n    /**\n     * Stops any currently-running auto-scroll sequences.\n     * @return {?}\n     */\n    _stopScrolling() {\n        this._stopScrollTimers.next();\n    }\n    /**\n     * Caches the position of the drop list.\n     * @private\n     * @return {?}\n     */\n    _cacheOwnPosition() {\n        /** @type {?} */\n        const element = coerceElement(this.element);\n        this._clientRect = getMutableClientRect(element);\n        this._scrollPosition = { top: element.scrollTop, left: element.scrollLeft };\n    }\n    /**\n     * Refreshes the position cache of the items and sibling containers.\n     * @private\n     * @return {?}\n     */\n    _cacheItemPositions() {\n        /** @type {?} */\n        const isHorizontal = this._orientation === 'horizontal';\n        this._itemPositions = this._activeDraggables.map((/**\n         * @param {?} drag\n         * @return {?}\n         */\n        drag => {\n            /** @type {?} */\n            const elementToMeasure = this._dragDropRegistry.isDragging(drag) ?\n                // If the element is being dragged, we have to measure the\n                // placeholder, because the element is hidden.\n                drag.getPlaceholderElement() :\n                drag.getRootElement();\n            return { drag, offset: 0, clientRect: getMutableClientRect(elementToMeasure) };\n        })).sort((/**\n         * @param {?} a\n         * @param {?} b\n         * @return {?}\n         */\n        (a, b) => {\n            return isHorizontal ? a.clientRect.left - b.clientRect.left :\n                a.clientRect.top - b.clientRect.top;\n        }));\n    }\n    /**\n     * Resets the container to its initial state.\n     * @private\n     * @return {?}\n     */\n    _reset() {\n        this._isDragging = false;\n        // TODO(crisbeto): may have to wait for the animations to finish.\n        this._activeDraggables.forEach((/**\n         * @param {?} item\n         * @return {?}\n         */\n        item => item.getRootElement().style.transform = ''));\n        this._siblings.forEach((/**\n         * @param {?} sibling\n         * @return {?}\n         */\n        sibling => sibling._stopReceiving(this)));\n        this._activeDraggables = [];\n        this._itemPositions = [];\n        this._previousSwap.drag = null;\n        this._previousSwap.delta = 0;\n        this._stopScrolling();\n        this._removeListeners();\n    }\n    /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @private\n     * @param {?} currentIndex Index of the item currently being dragged.\n     * @param {?} siblings All of the items in the list.\n     * @param {?} delta Direction in which the user is moving.\n     * @return {?}\n     */\n    _getSiblingOffsetPx(currentIndex, siblings, delta) {\n        /** @type {?} */\n        const isHorizontal = this._orientation === 'horizontal';\n        /** @type {?} */\n        const currentPosition = siblings[currentIndex].clientRect;\n        /** @type {?} */\n        const immediateSibling = siblings[currentIndex + delta * -1];\n        /** @type {?} */\n        let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n        if (immediateSibling) {\n            /** @type {?} */\n            const start = isHorizontal ? 'left' : 'top';\n            /** @type {?} */\n            const end = isHorizontal ? 'right' : 'bottom';\n            // Get the spacing between the start of the current item and the end of the one immediately\n            // after it in the direction in which the user is dragging, or vice versa. We add it to the\n            // offset in order to push the element to where it will be when it's inline and is influenced\n            // by the `margin` of its siblings.\n            if (delta === -1) {\n                siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n            }\n            else {\n                siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n            }\n        }\n        return siblingOffset;\n    }\n    /**\n     * Checks whether the pointer coordinates are close to the drop container.\n     * @private\n     * @param {?} pointerX Coordinates along the X axis.\n     * @param {?} pointerY Coordinates along the Y axis.\n     * @return {?}\n     */\n    _isPointerNearDropContainer(pointerX, pointerY) {\n        const { top, right, bottom, left, width, height } = this._clientRect;\n        /** @type {?} */\n        const xThreshold = width * DROP_PROXIMITY_THRESHOLD;\n        /** @type {?} */\n        const yThreshold = height * DROP_PROXIMITY_THRESHOLD;\n        return pointerY > top - yThreshold && pointerY < bottom + yThreshold &&\n            pointerX > left - xThreshold && pointerX < right + xThreshold;\n    }\n    /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @private\n     * @param {?} currentPosition Current position of the item.\n     * @param {?} newPosition Position of the item where the current item should be moved.\n     * @param {?} delta Direction in which the user is moving.\n     * @return {?}\n     */\n    _getItemOffsetPx(currentPosition, newPosition, delta) {\n        /** @type {?} */\n        const isHorizontal = this._orientation === 'horizontal';\n        /** @type {?} */\n        let itemOffset = isHorizontal ? newPosition.left - currentPosition.left :\n            newPosition.top - currentPosition.top;\n        // Account for differences in the item width/height.\n        if (delta === -1) {\n            itemOffset += isHorizontal ? newPosition.width - currentPosition.width :\n                newPosition.height - currentPosition.height;\n        }\n        return itemOffset;\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @private\n     * @param {?} item Item that is being sorted.\n     * @param {?} pointerX Position of the user's pointer along the X axis.\n     * @param {?} pointerY Position of the user's pointer along the Y axis.\n     * @param {?=} delta Direction in which the user is moving their pointer.\n     * @return {?}\n     */\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {\n        /** @type {?} */\n        const isHorizontal = this._orientation === 'horizontal';\n        return findIndex(this._itemPositions, (/**\n         * @param {?} __0\n         * @param {?} _\n         * @param {?} array\n         * @return {?}\n         */\n        ({ drag, clientRect }, _, array) => {\n            if (drag === item) {\n                // If there's only one item left in the container, it must be\n                // the dragged item itself so we use it as a reference.\n                return array.length < 2;\n            }\n            if (delta) {\n                /** @type {?} */\n                const direction = isHorizontal ? delta.x : delta.y;\n                // If the user is still hovering over the same item as last time, and they didn't change\n                // the direction in which they're dragging, we don't consider it a direction swap.\n                if (drag === this._previousSwap.drag && direction === this._previousSwap.delta) {\n                    return false;\n                }\n            }\n            return isHorizontal ?\n                // Round these down since most browsers report client rects with\n                // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n                pointerX >= Math.floor(clientRect.left) && pointerX <= Math.floor(clientRect.right) :\n                pointerY >= Math.floor(clientRect.top) && pointerY <= Math.floor(clientRect.bottom);\n        }));\n    }\n    /**\n     * Caches the current items in the list and their positions.\n     * @private\n     * @return {?}\n     */\n    _cacheItems() {\n        this._activeDraggables = this._draggables.slice();\n        this._cacheItemPositions();\n        this._cacheOwnPosition();\n    }\n    /**\n     * Updates the internal state of the container after a scroll event has happened.\n     * @private\n     * @param {?} scrollPosition Object that is keeping track of the scroll position.\n     * @param {?} newTop New top scroll position.\n     * @param {?} newLeft New left scroll position.\n     * @param {?=} extraClientRect Extra `ClientRect` object that should be updated, in addition to the\n     *  ones of the drag items. Useful when the viewport has been scrolled and we also need to update\n     *  the `ClientRect` of the list.\n     * @return {?}\n     */\n    _updateAfterScroll(scrollPosition, newTop, newLeft, extraClientRect) {\n        /** @type {?} */\n        const topDifference = scrollPosition.top - newTop;\n        /** @type {?} */\n        const leftDifference = scrollPosition.left - newLeft;\n        if (extraClientRect) {\n            adjustClientRect(extraClientRect, topDifference, leftDifference);\n        }\n        // Since we know the amount that the user has scrolled we can shift all of the client rectangles\n        // ourselves. This is cheaper than re-measuring everything and we can avoid inconsistent\n        // behavior where we might be measuring the element before its position has changed.\n        this._itemPositions.forEach((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ({ clientRect }) => {\n            adjustClientRect(clientRect, topDifference, leftDifference);\n        }));\n        // We need two loops for this, because we want all of the cached\n        // positions to be up-to-date before we re-sort the item.\n        this._itemPositions.forEach((/**\n         * @param {?} __0\n         * @return {?}\n         */\n        ({ drag }) => {\n            if (this._dragDropRegistry.isDragging(drag)) {\n                // We need to re-sort the item manually, because the pointer move\n                // events won't be dispatched while the user is scrolling.\n                drag._sortFromLastPointerPosition();\n            }\n        }));\n        scrollPosition.top = newTop;\n        scrollPosition.left = newLeft;\n    }\n    /**\n     * Removes the event listeners associated with this drop list.\n     * @private\n     * @return {?}\n     */\n    _removeListeners() {\n        coerceElement(this.element).removeEventListener('scroll', this._handleScroll);\n        this._viewportScrollSubscription.unsubscribe();\n    }\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param {?} x Pointer position along the X axis.\n     * @param {?} y Pointer position along the Y axis.\n     * @return {?}\n     */\n    _isOverContainer(x, y) {\n        return isInsideClientRect(this._clientRect, x, y);\n    }\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param {?} item Drag item that is being moved.\n     * @param {?} x Position of the item along the X axis.\n     * @param {?} y Position of the item along the Y axis.\n     * @return {?}\n     */\n    _getSiblingContainerFromPosition(item, x, y) {\n        return this._siblings.find((/**\n         * @param {?} sibling\n         * @return {?}\n         */\n        sibling => sibling._canReceive(item, x, y)));\n    }\n    /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param {?} item Item that is being dragged into the list.\n     * @param {?} x Position of the item along the X axis.\n     * @param {?} y Position of the item along the Y axis.\n     * @return {?}\n     */\n    _canReceive(item, x, y) {\n        if (!this.enterPredicate(item, this) || !isInsideClientRect(this._clientRect, x, y)) {\n            return false;\n        }\n        /** @type {?} */\n        const elementFromPoint = (/** @type {?} */ (this._shadowRoot.elementFromPoint(x, y)));\n        // If there's no element at the pointer position, then\n        // the client rect is probably scrolled out of the view.\n        if (!elementFromPoint) {\n            return false;\n        }\n        /** @type {?} */\n        const nativeElement = coerceElement(this.element);\n        // The `ClientRect`, that we're using to find the container over which the user is\n        // hovering, doesn't give us any information on whether the element has been scrolled\n        // out of the view or whether it's overlapping with other containers. This means that\n        // we could end up transferring the item into a container that's invisible or is positioned\n        // below another one. We use the result from `elementFromPoint` to get the top-most element\n        // at the pointer position and to find whether it's one of the intersecting drop containers.\n        return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);\n    }\n    /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param {?} sibling Sibling in which dragging has started.\n     * @return {?}\n     */\n    _startReceiving(sibling) {\n        /** @type {?} */\n        const activeSiblings = this._activeSiblings;\n        if (!activeSiblings.has(sibling)) {\n            activeSiblings.add(sibling);\n            this._cacheOwnPosition();\n            this._listenToScrollEvents();\n        }\n    }\n    /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param {?} sibling Sibling whose dragging has stopped.\n     * @return {?}\n     */\n    _stopReceiving(sibling) {\n        this._activeSiblings.delete(sibling);\n        this._viewportScrollSubscription.unsubscribe();\n    }\n    /**\n     * Starts listening to scroll events on the viewport.\n     * Used for updating the internal state of the list.\n     * @private\n     * @return {?}\n     */\n    _listenToScrollEvents() {\n        this._viewportScrollPosition = (/** @type {?} */ (this._viewportRuler)).getViewportScrollPosition();\n        this._viewportScrollSubscription = this._dragDropRegistry.scroll.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            if (this.isDragging()) {\n                /** @type {?} */\n                const newPosition = (/** @type {?} */ (this._viewportRuler)).getViewportScrollPosition();\n                this._updateAfterScroll(this._viewportScrollPosition, newPosition.top, newPosition.left, this._clientRect);\n            }\n            else if (this.isReceiving()) {\n                this._cacheOwnPosition();\n            }\n        }));\n    }\n}\n/**\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n * @param {?} clientRect `ClientRect` that should be updated.\n * @param {?} top Amount to add to the `top` position.\n * @param {?} left Amount to add to the `left` position.\n * @return {?}\n */\nfunction adjustClientRect(clientRect, top, left) {\n    clientRect.top += top;\n    clientRect.bottom = clientRect.top + clientRect.height;\n    clientRect.left += left;\n    clientRect.right = clientRect.left + clientRect.width;\n}\n/**\n * Finds the index of an item that matches a predicate function. Used as an equivalent\n * of `Array.prototype.findIndex` which isn't part of the standard Google typings.\n * @template T\n * @param {?} array Array in which to look for matches.\n * @param {?} predicate Function used to determine whether an item is a match.\n * @return {?}\n */\nfunction findIndex(array, predicate) {\n    for (let i = 0; i < array.length; i++) {\n        if (predicate(array[i], i, array)) {\n            return i;\n        }\n    }\n    return -1;\n}\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param {?} clientRect ClientRect that is being checked.\n * @param {?} x Coordinates along the X axis.\n * @param {?} y Coordinates along the Y axis.\n * @return {?}\n */\nfunction isInsideClientRect(clientRect, x, y) {\n    const { top, bottom, left, right } = clientRect;\n    return y >= top && y <= bottom && x >= left && x <= right;\n}\n/**\n * Gets a mutable version of an element's bounding `ClientRect`.\n * @param {?} element\n * @return {?}\n */\nfunction getMutableClientRect(element) {\n    /** @type {?} */\n    const clientRect = element.getBoundingClientRect();\n    // We need to clone the `clientRect` here, because all the values on it are readonly\n    // and we need to be able to update them. Also we can't use a spread here, because\n    // the values on a `ClientRect` aren't own properties. See:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n    return {\n        top: clientRect.top,\n        right: clientRect.right,\n        bottom: clientRect.bottom,\n        left: clientRect.left,\n        width: clientRect.width,\n        height: clientRect.height\n    };\n}\n/**\n * Increments the vertical scroll position of a node.\n * @param {?} node Node whose scroll position should change.\n * @param {?} amount Amount of pixels that the `node` should be scrolled.\n * @return {?}\n */\nfunction incrementVerticalScroll(node, amount) {\n    if (node === window) {\n        ((/** @type {?} */ (node))).scrollBy(0, amount);\n    }\n    else {\n        // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n        ((/** @type {?} */ (node))).scrollTop += amount;\n    }\n}\n/**\n * Increments the horizontal scroll position of a node.\n * @param {?} node Node whose scroll position should change.\n * @param {?} amount Amount of pixels that the `node` should be scrolled.\n * @return {?}\n */\nfunction incrementHorizontalScroll(node, amount) {\n    if (node === window) {\n        ((/** @type {?} */ (node))).scrollBy(amount, 0);\n    }\n    else {\n        // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n        ((/** @type {?} */ (node))).scrollLeft += amount;\n    }\n}\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param {?} clientRect Dimensions of the node.\n * @param {?} pointerY Position of the user's pointer along the y axis.\n * @return {?}\n */\nfunction getVerticalScrollDirection(clientRect, pointerY) {\n    const { top, bottom, height } = clientRect;\n    /** @type {?} */\n    const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n        return 1 /* UP */;\n    }\n    else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n        return 2 /* DOWN */;\n    }\n    return 0 /* NONE */;\n}\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param {?} clientRect Dimensions of the node.\n * @param {?} pointerX Position of the user's pointer along the x axis.\n * @return {?}\n */\nfunction getHorizontalScrollDirection(clientRect, pointerX) {\n    const { left, right, width } = clientRect;\n    /** @type {?} */\n    const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n        return 1 /* LEFT */;\n    }\n    else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n        return 2 /* RIGHT */;\n    }\n    return 0 /* NONE */;\n}\n/**\n * Gets the directions in which an element node should be scrolled,\n * assuming that the user's pointer is already within it scrollable region.\n * @param {?} element Element for which we should calculate the scroll direction.\n * @param {?} clientRect Bounding client rectangle of the element.\n * @param {?} pointerX Position of the user's pointer along the x axis.\n * @param {?} pointerY Position of the user's pointer along the y axis.\n * @return {?}\n */\nfunction getElementScrollDirections(element, clientRect, pointerX, pointerY) {\n    /** @type {?} */\n    const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n    /** @type {?} */\n    const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n    /** @type {?} */\n    let verticalScrollDirection = 0 /* NONE */;\n    /** @type {?} */\n    let horizontalScrollDirection = 0 /* NONE */;\n    // Note that we here we do some extra checks for whether the element is actually scrollable in\n    // a certain direction and we only assign the scroll direction if it is. We do this so that we\n    // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n    // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n    if (computedVertical) {\n        /** @type {?} */\n        const scrollTop = element.scrollTop;\n        if (computedVertical === 1 /* UP */) {\n            if (scrollTop > 0) {\n                verticalScrollDirection = 1 /* UP */;\n            }\n        }\n        else if (element.scrollHeight - scrollTop > element.clientHeight) {\n            verticalScrollDirection = 2 /* DOWN */;\n        }\n    }\n    if (computedHorizontal) {\n        /** @type {?} */\n        const scrollLeft = element.scrollLeft;\n        if (computedHorizontal === 1 /* LEFT */) {\n            if (scrollLeft > 0) {\n                horizontalScrollDirection = 1 /* LEFT */;\n            }\n        }\n        else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n            horizontalScrollDirection = 2 /* RIGHT */;\n        }\n    }\n    return [verticalScrollDirection, horizontalScrollDirection];\n}\n/**\n * Gets the shadow root of an element, if any.\n * @param {?} element\n * @return {?}\n */\nfunction getShadowRoot(element) {\n    if (_supportsShadowDom()) {\n        /** @type {?} */\n        const rootNode = element.getRootNode ? element.getRootNode() : null;\n        if (rootNode instanceof ShadowRoot) {\n            return rootNode;\n        }\n    }\n    return null;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Event options that can be used to bind an active, capturing event.\n * @type {?}\n */\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n    passive: false,\n    capture: true\n});\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * \\@docs-private\n * @template I, C\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\nclass DragDropRegistry {\n    /**\n     * @param {?} _ngZone\n     * @param {?} _document\n     */\n    constructor(_ngZone, _document) {\n        this._ngZone = _ngZone;\n        /**\n         * Registered drop container instances.\n         */\n        this._dropInstances = new Set();\n        /**\n         * Registered drag item instances.\n         */\n        this._dragInstances = new Set();\n        /**\n         * Drag item instances that are currently being dragged.\n         */\n        this._activeDragInstances = new Set();\n        /**\n         * Keeps track of the event listeners that we've bound to the `document`.\n         */\n        this._globalListeners = new Map();\n        /**\n         * Emits the `touchmove` or `mousemove` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerMove = new Subject();\n        /**\n         * Emits the `touchend` or `mouseup` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerUp = new Subject();\n        /**\n         * Emits when the viewport has been scrolled while the user is dragging an item.\n         */\n        this.scroll = new Subject();\n        /**\n         * Event listener that will prevent the default browser action while the user is dragging.\n         * @param event Event whose default action should be prevented.\n         */\n        this._preventDefaultWhileDragging = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            if (this._activeDragInstances.size) {\n                event.preventDefault();\n            }\n        });\n        this._document = _document;\n    }\n    /**\n     * Adds a drop container to the registry.\n     * @param {?} drop\n     * @return {?}\n     */\n    registerDropContainer(drop) {\n        if (!this._dropInstances.has(drop)) {\n            if (this.getDropContainer(drop.id)) {\n                throw Error(`Drop instance with id \"${drop.id}\" has already been registered.`);\n            }\n            this._dropInstances.add(drop);\n        }\n    }\n    /**\n     * Adds a drag item instance to the registry.\n     * @param {?} drag\n     * @return {?}\n     */\n    registerDragItem(drag) {\n        this._dragInstances.add(drag);\n        // The `touchmove` event gets bound once, ahead of time, because WebKit\n        // won't preventDefault on a dynamically-added `touchmove` listener.\n        // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n        if (this._dragInstances.size === 1) {\n            this._ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                // The event handler has to be explicitly active,\n                // because newer browsers make it passive by default.\n                this._document.addEventListener('touchmove', this._preventDefaultWhileDragging, activeCapturingEventOptions);\n            }));\n        }\n    }\n    /**\n     * Removes a drop container from the registry.\n     * @param {?} drop\n     * @return {?}\n     */\n    removeDropContainer(drop) {\n        this._dropInstances.delete(drop);\n    }\n    /**\n     * Removes a drag item instance from the registry.\n     * @param {?} drag\n     * @return {?}\n     */\n    removeDragItem(drag) {\n        this._dragInstances.delete(drag);\n        this.stopDragging(drag);\n        if (this._dragInstances.size === 0) {\n            this._document.removeEventListener('touchmove', this._preventDefaultWhileDragging, activeCapturingEventOptions);\n        }\n    }\n    /**\n     * Starts the dragging sequence for a drag instance.\n     * @param {?} drag Drag instance which is being dragged.\n     * @param {?} event Event that initiated the dragging.\n     * @return {?}\n     */\n    startDragging(drag, event) {\n        // Do not process the same drag twice to avoid memory leaks and redundant listeners\n        if (this._activeDragInstances.has(drag)) {\n            return;\n        }\n        this._activeDragInstances.add(drag);\n        if (this._activeDragInstances.size === 1) {\n            /** @type {?} */\n            const isTouchEvent = event.type.startsWith('touch');\n            /** @type {?} */\n            const moveEvent = isTouchEvent ? 'touchmove' : 'mousemove';\n            /** @type {?} */\n            const upEvent = isTouchEvent ? 'touchend' : 'mouseup';\n            // We explicitly bind __active__ listeners here, because newer browsers will default to\n            // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n            // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n            this._globalListeners\n                .set(moveEvent, {\n                handler: (/**\n                 * @param {?} e\n                 * @return {?}\n                 */\n                (e) => this.pointerMove.next((/** @type {?} */ (e)))),\n                options: activeCapturingEventOptions\n            })\n                .set(upEvent, {\n                handler: (/**\n                 * @param {?} e\n                 * @return {?}\n                 */\n                (e) => this.pointerUp.next((/** @type {?} */ (e)))),\n                options: true\n            })\n                .set('scroll', {\n                handler: (/**\n                 * @param {?} e\n                 * @return {?}\n                 */\n                (e) => this.scroll.next(e)),\n                // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n                // the document. See https://github.com/angular/components/issues/17144.\n                options: true\n            })\n                // Preventing the default action on `mousemove` isn't enough to disable text selection\n                // on Safari so we need to prevent the selection event as well. Alternatively this can\n                // be done by setting `user-select: none` on the `body`, however it has causes a style\n                // recalculation which can be expensive on pages with a lot of elements.\n                .set('selectstart', {\n                handler: this._preventDefaultWhileDragging,\n                options: activeCapturingEventOptions\n            });\n            this._ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                this._globalListeners.forEach((/**\n                 * @param {?} config\n                 * @param {?} name\n                 * @return {?}\n                 */\n                (config, name) => {\n                    this._document.addEventListener(name, config.handler, config.options);\n                }));\n            }));\n        }\n    }\n    /**\n     * Stops dragging a drag item instance.\n     * @param {?} drag\n     * @return {?}\n     */\n    stopDragging(drag) {\n        this._activeDragInstances.delete(drag);\n        if (this._activeDragInstances.size === 0) {\n            this._clearGlobalListeners();\n        }\n    }\n    /**\n     * Gets whether a drag item instance is currently being dragged.\n     * @param {?} drag\n     * @return {?}\n     */\n    isDragging(drag) {\n        return this._activeDragInstances.has(drag);\n    }\n    /**\n     * Gets a drop container by its id.\n     * @deprecated No longer being used. To be removed.\n     * \\@breaking-change 8.0.0\n     * @param {?} id\n     * @return {?}\n     */\n    getDropContainer(id) {\n        return Array.from(this._dropInstances).find((/**\n         * @param {?} instance\n         * @return {?}\n         */\n        instance => instance.id === id));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._dragInstances.forEach((/**\n         * @param {?} instance\n         * @return {?}\n         */\n        instance => this.removeDragItem(instance)));\n        this._dropInstances.forEach((/**\n         * @param {?} instance\n         * @return {?}\n         */\n        instance => this.removeDropContainer(instance)));\n        this._clearGlobalListeners();\n        this.pointerMove.complete();\n        this.pointerUp.complete();\n    }\n    /**\n     * Clears out the global event listeners from the `document`.\n     * @private\n     * @return {?}\n     */\n    _clearGlobalListeners() {\n        this._globalListeners.forEach((/**\n         * @param {?} config\n         * @param {?} name\n         * @return {?}\n         */\n        (config, name) => {\n            this._document.removeEventListener(name, config.handler, config.options);\n        }));\n        this._globalListeners.clear();\n    }\n}\nDragDropRegistry.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] },\n];\n/** @nocollapse */\nDragDropRegistry.ctorParameters = () => [\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/** @nocollapse */ DragDropRegistry.ngInjectableDef = ɵɵdefineInjectable({ factory: function DragDropRegistry_Factory() { return new DragDropRegistry(ɵɵinject(NgZone), ɵɵinject(DOCUMENT)); }, token: DragDropRegistry, providedIn: \"root\" });\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Default configuration to be used when creating a `DragRef`.\n * @type {?}\n */\nconst DEFAULT_CONFIG = {\n    dragStartThreshold: 5,\n    pointerDirectionChangeThreshold: 5\n};\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\nclass DragDrop {\n    /**\n     * @param {?} _document\n     * @param {?} _ngZone\n     * @param {?} _viewportRuler\n     * @param {?} _dragDropRegistry\n     */\n    constructor(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * Turns an element into a draggable item.\n     * @template T\n     * @param {?} element Element to which to attach the dragging functionality.\n     * @param {?=} config Object used to configure the dragging behavior.\n     * @return {?}\n     */\n    createDrag(element, config = DEFAULT_CONFIG) {\n        return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\n    }\n    /**\n     * Turns an element into a drop list.\n     * @template T\n     * @param {?} element Element to which to attach the drop list functionality.\n     * @return {?}\n     */\n    createDropList(element) {\n        return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n    }\n}\nDragDrop.decorators = [\n    { type: Injectable, args: [{ providedIn: 'root' },] },\n];\n/** @nocollapse */\nDragDrop.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: NgZone },\n    { type: ViewportRuler },\n    { type: DragDropRegistry }\n];\n/** @nocollapse */ DragDrop.ngInjectableDef = ɵɵdefineInjectable({ factory: function DragDrop_Factory() { return new DragDrop(ɵɵinject(DOCUMENT), ɵɵinject(NgZone), ɵɵinject(ViewportRuler), ɵɵinject(DragDropRegistry)); }, token: DragDrop, providedIn: \"root\" });\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that is used to provide a CdkDropList instance to CdkDrag.\n * Used for avoiding circular imports.\n * @type {?}\n */\nconst CDK_DROP_LIST = new InjectionToken('CDK_DROP_LIST');\n/**\n * Injection token that is used to provide a CdkDropList instance to CdkDrag.\n * Used for avoiding circular imports.\n * @deprecated Use `CDK_DROP_LIST` instead.\n * \\@breaking-change 8.0.0\n * @type {?}\n */\nconst CDK_DROP_LIST_CONTAINER = CDK_DROP_LIST;\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * \\@docs-private\n * @type {?}\n */\nconst CDK_DRAG_PARENT = new InjectionToken('CDK_DRAG_PARENT');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Handle that can be used to drag and CdkDrag instance.\n */\nclass CdkDragHandle {\n    /**\n     * @param {?} element\n     * @param {?=} parentDrag\n     */\n    constructor(element, parentDrag) {\n        this.element = element;\n        /**\n         * Emits when the state of the handle has changed.\n         */\n        this._stateChanges = new Subject();\n        this._disabled = false;\n        this._parentDrag = parentDrag;\n        toggleNativeDragInteractions(element.nativeElement, false);\n    }\n    /**\n     * Whether starting to drag through this handle is disabled.\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._stateChanges.next(this);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n}\nCdkDragHandle.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkDragHandle]',\n                host: {\n                    'class': 'cdk-drag-handle'\n                }\n            },] },\n];\n/** @nocollapse */\nCdkDragHandle.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_DRAG_PARENT,] }, { type: Optional }] }\n];\nCdkDragHandle.propDecorators = {\n    disabled: [{ type: Input, args: ['cdkDragHandleDisabled',] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n * @template T\n */\nclass CdkDragPlaceholder {\n    /**\n     * @param {?} templateRef\n     */\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nCdkDragPlaceholder.decorators = [\n    { type: Directive, args: [{\n                selector: 'ng-template[cdkDragPlaceholder]'\n            },] },\n];\n/** @nocollapse */\nCdkDragPlaceholder.ctorParameters = () => [\n    { type: TemplateRef }\n];\nCdkDragPlaceholder.propDecorators = {\n    data: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n * @template T\n */\nclass CdkDragPreview {\n    /**\n     * @param {?} templateRef\n     */\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nCdkDragPreview.decorators = [\n    { type: Directive, args: [{\n                selector: 'ng-template[cdkDragPreview]'\n            },] },\n];\n/** @nocollapse */\nCdkDragPreview.ctorParameters = () => [\n    { type: TemplateRef }\n];\nCdkDragPreview.propDecorators = {\n    data: [{ type: Input }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token that can be used to configure the behavior of `CdkDrag`.\n * @type {?}\n */\nconst CDK_DRAG_CONFIG = new InjectionToken('CDK_DRAG_CONFIG', {\n    providedIn: 'root',\n    factory: CDK_DRAG_CONFIG_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction CDK_DRAG_CONFIG_FACTORY() {\n    return { dragStartThreshold: 5, pointerDirectionChangeThreshold: 5 };\n}\n/**\n * Element that can be moved inside a CdkDropList container.\n * @template T\n */\nclass CdkDrag {\n    /**\n     * @param {?} element\n     * @param {?} dropContainer\n     * @param {?} _document\n     * @param {?} _ngZone\n     * @param {?} _viewContainerRef\n     * @param {?} config\n     * @param {?} _dir\n     * @param {?} dragDrop\n     * @param {?} _changeDetectorRef\n     */\n    constructor(element, dropContainer, _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef) {\n        this.element = element;\n        this.dropContainer = dropContainer;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewContainerRef = _viewContainerRef;\n        this._dir = _dir;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._destroyed = new Subject();\n        /**\n         * Amount of milliseconds to wait after the user has put their\n         * pointer down before starting to drag the element.\n         */\n        this.dragStartDelay = 0;\n        this._disabled = false;\n        /**\n         * Emits when the user starts dragging the item.\n         */\n        this.started = new EventEmitter();\n        /**\n         * Emits when the user has released a drag item, before any animations have started.\n         */\n        this.released = new EventEmitter();\n        /**\n         * Emits when the user stops dragging an item in the container.\n         */\n        this.ended = new EventEmitter();\n        /**\n         * Emits when the user has moved the item into a new container.\n         */\n        this.entered = new EventEmitter();\n        /**\n         * Emits when the user removes the item its container by dragging it into another container.\n         */\n        this.exited = new EventEmitter();\n        /**\n         * Emits when the user drops the item inside a container.\n         */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = new Observable((/**\n         * @param {?} observer\n         * @return {?}\n         */\n        (observer) => {\n            /** @type {?} */\n            const subscription = this._dragRef.moved.pipe(map((/**\n             * @param {?} movedEvent\n             * @return {?}\n             */\n            movedEvent => ({\n                source: this,\n                pointerPosition: movedEvent.pointerPosition,\n                event: movedEvent.event,\n                delta: movedEvent.delta,\n                distance: movedEvent.distance\n            })))).subscribe(observer);\n            return (/**\n             * @return {?}\n             */\n            () => {\n                subscription.unsubscribe();\n            });\n        }));\n        this._dragRef = dragDrop.createDrag(element, config);\n        this._dragRef.data = this;\n        this._syncInputs(this._dragRef);\n        this._handleEvents(this._dragRef);\n    }\n    /**\n     * Selector that will be used to determine the element to which the draggable's position will\n     * be constrained. Matching starts from the element's parent and goes up the DOM until a matching\n     * element has been found\n     * @deprecated Use `boundaryElement` instead.\n     * \\@breaking-change 9.0.0\n     * @return {?}\n     */\n    get boundaryElementSelector() {\n        return typeof this.boundaryElement === 'string' ? this.boundaryElement : (/** @type {?} */ (undefined));\n    }\n    /**\n     * @param {?} selector\n     * @return {?}\n     */\n    set boundaryElementSelector(selector) {\n        this.boundaryElement = selector;\n    }\n    /**\n     * Whether starting to drag this element is disabled.\n     * @return {?}\n     */\n    get disabled() {\n        return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._dragRef.disabled = this._disabled;\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     * @return {?}\n     */\n    getPlaceholderElement() {\n        return this._dragRef.getPlaceholderElement();\n    }\n    /**\n     * Returns the root draggable element.\n     * @return {?}\n     */\n    getRootElement() {\n        return this._dragRef.getRootElement();\n    }\n    /**\n     * Resets a standalone drag item to its initial position.\n     * @return {?}\n     */\n    reset() {\n        this._dragRef.reset();\n    }\n    /**\n     * Gets the pixel coordinates of the draggable outside of a drop container.\n     * @return {?}\n     */\n    getFreeDragPosition() {\n        return this._dragRef.getFreeDragPosition();\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        // We need to wait for the zone to stabilize, in order for the reference\n        // element to be in the proper place in the DOM. This is mostly relevant\n        // for draggable elements inside portals since they get stamped out in\n        // their original DOM position and then they get transferred to the portal.\n        this._ngZone.onStable.asObservable()\n            .pipe(take(1), takeUntil(this._destroyed))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._updateRootElement();\n            // Listen for any newly-added handles.\n            this._handles.changes.pipe(startWith(this._handles), \n            // Sync the new handles with the DragRef.\n            tap((/**\n             * @param {?} handles\n             * @return {?}\n             */\n            (handles) => {\n                /** @type {?} */\n                const childHandleElements = handles\n                    .filter((/**\n                 * @param {?} handle\n                 * @return {?}\n                 */\n                handle => handle._parentDrag === this))\n                    .map((/**\n                 * @param {?} handle\n                 * @return {?}\n                 */\n                handle => handle.element));\n                this._dragRef.withHandles(childHandleElements);\n            })), \n            // Listen if the state of any of the handles changes.\n            switchMap((/**\n             * @param {?} handles\n             * @return {?}\n             */\n            (handles) => {\n                return merge(...handles.map((/**\n                 * @param {?} item\n                 * @return {?}\n                 */\n                item => item._stateChanges)));\n            })), takeUntil(this._destroyed)).subscribe((/**\n             * @param {?} handleInstance\n             * @return {?}\n             */\n            handleInstance => {\n                // Enabled/disable the handle that changed in the DragRef.\n                /** @type {?} */\n                const dragRef = this._dragRef;\n                /** @type {?} */\n                const handle = handleInstance.element.nativeElement;\n                handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n            }));\n            if (this.freeDragPosition) {\n                this._dragRef.setFreeDragPosition(this.freeDragPosition);\n            }\n        }));\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    ngOnChanges(changes) {\n        /** @type {?} */\n        const rootSelectorChange = changes['rootElementSelector'];\n        /** @type {?} */\n        const positionChange = changes['freeDragPosition'];\n        // We don't have to react to the first change since it's being\n        // handled in `ngAfterViewInit` where it needs to be deferred.\n        if (rootSelectorChange && !rootSelectorChange.firstChange) {\n            this._updateRootElement();\n        }\n        // Skip the first change since it's being handled in `ngAfterViewInit`.\n        if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n            this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._dragRef.dispose();\n    }\n    /**\n     * Syncs the root element with the `DragRef`.\n     * @private\n     * @return {?}\n     */\n    _updateRootElement() {\n        /** @type {?} */\n        const element = this.element.nativeElement;\n        /** @type {?} */\n        const rootElement = this.rootElementSelector ?\n            getClosestMatchingAncestor(element, this.rootElementSelector) : element;\n        if (rootElement && rootElement.nodeType !== this._document.ELEMENT_NODE) {\n            throw Error(`cdkDrag must be attached to an element node. ` +\n                `Currently attached to \"${rootElement.nodeName}\".`);\n        }\n        this._dragRef.withRootElement(rootElement || element);\n    }\n    /**\n     * Gets the boundary element, based on the `boundaryElement` value.\n     * @private\n     * @return {?}\n     */\n    _getBoundaryElement() {\n        /** @type {?} */\n        const boundary = this.boundaryElement;\n        if (!boundary) {\n            return null;\n        }\n        if (typeof boundary === 'string') {\n            return getClosestMatchingAncestor(this.element.nativeElement, boundary);\n        }\n        /** @type {?} */\n        const element = coerceElement(boundary);\n        if (isDevMode() && !element.contains(this.element.nativeElement)) {\n            throw Error('Draggable element is not inside of the node passed into cdkDragBoundary.');\n        }\n        return element;\n    }\n    /**\n     * Syncs the inputs of the CdkDrag with the options of the underlying DragRef.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    _syncInputs(ref) {\n        ref.beforeStarted.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            if (!ref.isDragging()) {\n                /** @type {?} */\n                const dir = this._dir;\n                /** @type {?} */\n                const placeholder = this._placeholderTemplate ? {\n                    template: this._placeholderTemplate.templateRef,\n                    context: this._placeholderTemplate.data,\n                    viewContainer: this._viewContainerRef\n                } : null;\n                /** @type {?} */\n                const preview = this._previewTemplate ? {\n                    template: this._previewTemplate.templateRef,\n                    context: this._previewTemplate.data,\n                    viewContainer: this._viewContainerRef\n                } : null;\n                ref.disabled = this.disabled;\n                ref.lockAxis = this.lockAxis;\n                ref.dragStartDelay = coerceNumberProperty(this.dragStartDelay);\n                ref.constrainPosition = this.constrainPosition;\n                ref\n                    .withBoundaryElement(this._getBoundaryElement())\n                    .withPlaceholderTemplate(placeholder)\n                    .withPreviewTemplate(preview);\n                if (dir) {\n                    ref.withDirection(dir.value);\n                }\n            }\n        }));\n    }\n    /**\n     * Handles the events from the underlying `DragRef`.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    _handleEvents(ref) {\n        ref.started.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this.started.emit({ source: this });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        }));\n        ref.released.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this.released.emit({ source: this });\n        }));\n        ref.ended.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.ended.emit({ source: this, distance: event.distance });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        }));\n        ref.entered.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.entered.emit({\n                container: event.container.data,\n                item: this,\n                currentIndex: event.currentIndex\n            });\n        }));\n        ref.exited.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.exited.emit({\n                container: event.container.data,\n                item: this\n            });\n        }));\n        ref.dropped.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                isPointerOverContainer: event.isPointerOverContainer,\n                item: this,\n                distance: event.distance\n            });\n        }));\n    }\n}\nCdkDrag.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkDrag]',\n                exportAs: 'cdkDrag',\n                host: {\n                    'class': 'cdk-drag',\n                    '[class.cdk-drag-disabled]': 'disabled',\n                    '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n                },\n                providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }]\n            },] },\n];\n/** @nocollapse */\nCdkDrag.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_DROP_LIST,] }, { type: Optional }, { type: SkipSelf }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: NgZone },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_DRAG_CONFIG,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: DragDrop },\n    { type: ChangeDetectorRef }\n];\nCdkDrag.propDecorators = {\n    _handles: [{ type: ContentChildren, args: [CdkDragHandle, { descendants: true },] }],\n    _previewTemplate: [{ type: ContentChild, args: [CdkDragPreview, { static: false },] }],\n    _placeholderTemplate: [{ type: ContentChild, args: [CdkDragPlaceholder, { static: false },] }],\n    data: [{ type: Input, args: ['cdkDragData',] }],\n    lockAxis: [{ type: Input, args: ['cdkDragLockAxis',] }],\n    rootElementSelector: [{ type: Input, args: ['cdkDragRootElement',] }],\n    boundaryElement: [{ type: Input, args: ['cdkDragBoundary',] }],\n    dragStartDelay: [{ type: Input, args: ['cdkDragStartDelay',] }],\n    freeDragPosition: [{ type: Input, args: ['cdkDragFreeDragPosition',] }],\n    disabled: [{ type: Input, args: ['cdkDragDisabled',] }],\n    constrainPosition: [{ type: Input, args: ['cdkDragConstrainPosition',] }],\n    started: [{ type: Output, args: ['cdkDragStarted',] }],\n    released: [{ type: Output, args: ['cdkDragReleased',] }],\n    ended: [{ type: Output, args: ['cdkDragEnded',] }],\n    entered: [{ type: Output, args: ['cdkDragEntered',] }],\n    exited: [{ type: Output, args: ['cdkDragExited',] }],\n    dropped: [{ type: Output, args: ['cdkDragDropped',] }],\n    moved: [{ type: Output, args: ['cdkDragMoved',] }]\n};\n/**\n * Gets the closest ancestor of an element that matches a selector.\n * @param {?} element\n * @param {?} selector\n * @return {?}\n */\nfunction getClosestMatchingAncestor(element, selector) {\n    /** @type {?} */\n    let currentElement = (/** @type {?} */ (element.parentElement));\n    while (currentElement) {\n        // IE doesn't support `matches` so we have to fall back to `msMatchesSelector`.\n        if (currentElement.matches ? currentElement.matches(selector) :\n            ((/** @type {?} */ (currentElement))).msMatchesSelector(selector)) {\n            return currentElement;\n        }\n        currentElement = currentElement.parentElement;\n    }\n    return null;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n * @template T\n */\nclass CdkDropListGroup {\n    constructor() {\n        /**\n         * Drop lists registered inside the group.\n         */\n        this._items = new Set();\n        this._disabled = false;\n    }\n    /**\n     * Whether starting a dragging sequence from inside this group is disabled.\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._items.clear();\n    }\n}\nCdkDropListGroup.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkDropListGroup]',\n                exportAs: 'cdkDropListGroup',\n            },] },\n];\nCdkDropListGroup.propDecorators = {\n    disabled: [{ type: Input, args: ['cdkDropListGroupDisabled',] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Counter used to generate unique ids for drop zones.\n * @type {?}\n */\nlet _uniqueIdCounter$1 = 0;\nconst ɵ0 = undefined;\n// @breaking-change 8.0.0 `CdkDropList` implements `CdkDropListContainer` for backwards\n// compatiblity. The implements clause, as well as all the methods that it enforces can\n// be removed when `CdkDropListContainer` is deleted.\n/**\n * Container that wraps a set of draggable items.\n * @template T\n */\nclass CdkDropList {\n    /**\n     * @param {?} element\n     * @param {?} dragDrop\n     * @param {?} _changeDetectorRef\n     * @param {?=} _dir\n     * @param {?=} _group\n     */\n    constructor(element, dragDrop, _changeDetectorRef, _dir, _group) {\n        this.element = element;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._group = _group;\n        /**\n         * Emits when the list has been destroyed.\n         */\n        this._destroyed = new Subject();\n        /**\n         * Other draggable containers that this container is connected to and into which the\n         * container's items can be transferred. Can either be references to other drop containers,\n         * or their unique IDs.\n         */\n        this.connectedTo = [];\n        /**\n         * Direction in which the list is oriented.\n         */\n        this.orientation = 'vertical';\n        /**\n         * Unique ID for the drop zone. Can be used as a reference\n         * in the `connectedTo` of another `CdkDropList`.\n         */\n        this.id = `cdk-drop-list-${_uniqueIdCounter$1++}`;\n        this._disabled = false;\n        this._sortingDisabled = false;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = (/**\n         * @return {?}\n         */\n        () => true);\n        /**\n         * Whether to auto-scroll the view when the user moves their pointer close to the edges.\n         */\n        this.autoScrollDisabled = false;\n        /**\n         * Emits when the user drops an item inside the container.\n         */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new EventEmitter();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new EventEmitter();\n        /**\n         * Emits as the user is swapping items while actively dragging.\n         */\n        this.sorted = new EventEmitter();\n        this._dropListRef = dragDrop.createDropList(element);\n        this._dropListRef.data = this;\n        this._dropListRef.enterPredicate = (/**\n         * @param {?} drag\n         * @param {?} drop\n         * @return {?}\n         */\n        (drag, drop) => {\n            return this.enterPredicate(drag.data, drop.data);\n        });\n        this._syncInputs(this._dropListRef);\n        this._handleEvents(this._dropListRef);\n        CdkDropList._dropLists.push(this);\n        if (_group) {\n            _group._items.add(this);\n        }\n    }\n    /**\n     * Whether starting a dragging sequence from this container is disabled.\n     * @return {?}\n     */\n    get disabled() {\n        return this._disabled || (!!this._group && this._group.disabled);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    /**\n     * Whether sorting within this drop list is disabled.\n     * @return {?}\n     */\n    get sortingDisabled() { return this._sortingDisabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set sortingDisabled(value) {\n        this._sortingDisabled = coerceBooleanProperty(value);\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        this._draggables.changes\n            .pipe(startWith(this._draggables), takeUntil(this._destroyed))\n            .subscribe((/**\n         * @param {?} items\n         * @return {?}\n         */\n        (items) => {\n            this._dropListRef.withItems(items.map((/**\n             * @param {?} drag\n             * @return {?}\n             */\n            drag => drag._dragRef)));\n        }));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        /** @type {?} */\n        const index = CdkDropList._dropLists.indexOf(this);\n        if (index > -1) {\n            CdkDropList._dropLists.splice(index, 1);\n        }\n        if (this._group) {\n            this._group._items.delete(this);\n        }\n        this._dropListRef.dispose();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Starts dragging an item.\n     * @return {?}\n     */\n    start() {\n        this._dropListRef.start();\n    }\n    /**\n     * Drops an item into this container.\n     * @param {?} item Item being dropped into the container.\n     * @param {?} currentIndex Index at which the item should be inserted.\n     * @param {?} previousContainer Container from which the item got dragged in.\n     * @param {?} isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @return {?}\n     */\n    drop(item, currentIndex, previousContainer, isPointerOverContainer) {\n        this._dropListRef.drop(item._dragRef, currentIndex, ((/** @type {?} */ (previousContainer)))._dropListRef, isPointerOverContainer);\n    }\n    /**\n     * Emits an event to indicate that the user moved an item into the container.\n     * @param {?} item Item that was moved into the container.\n     * @param {?} pointerX Position of the item along the X axis.\n     * @param {?} pointerY Position of the item along the Y axis.\n     * @return {?}\n     */\n    enter(item, pointerX, pointerY) {\n        this._dropListRef.enter(item._dragRef, pointerX, pointerY);\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param {?} item Item that was dragged out.\n     * @return {?}\n     */\n    exit(item) {\n        this._dropListRef.exit(item._dragRef);\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @param {?} item Item whose index should be determined.\n     * @return {?}\n     */\n    getItemIndex(item) {\n        return this._dropListRef.getItemIndex(item._dragRef);\n    }\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param {?} item Item to be sorted.\n     * @param {?} pointerX Position of the item along the X axis.\n     * @param {?} pointerY Position of the item along the Y axis.\n     * @param {?} pointerDelta Direction in which the pointer is moving along each axis.\n     * @return {?}\n     */\n    _sortItem(item, pointerX, pointerY, pointerDelta) {\n        return this._dropListRef._sortItem(item._dragRef, pointerX, pointerY, pointerDelta);\n    }\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param {?} item Drag item that is being moved.\n     * @param {?} x Position of the item along the X axis.\n     * @param {?} y Position of the item along the Y axis.\n     * @return {?}\n     */\n    _getSiblingContainerFromPosition(item, x, y) {\n        /** @type {?} */\n        const result = this._dropListRef._getSiblingContainerFromPosition(item._dragRef, x, y);\n        return result ? result.data : null;\n    }\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param {?} x Pointer position along the X axis.\n     * @param {?} y Pointer position along the Y axis.\n     * @return {?}\n     */\n    _isOverContainer(x, y) {\n        return this._dropListRef._isOverContainer(x, y);\n    }\n    /**\n     * Syncs the inputs of the CdkDropList with the options of the underlying DropListRef.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    _syncInputs(ref) {\n        if (this._dir) {\n            this._dir.change\n                .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n                .subscribe((/**\n             * @param {?} value\n             * @return {?}\n             */\n            value => ref.withDirection(value)));\n        }\n        ref.beforeStarted.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const siblings = coerceArray(this.connectedTo).map((/**\n             * @param {?} drop\n             * @return {?}\n             */\n            drop => {\n                return typeof drop === 'string' ?\n                    (/** @type {?} */ (CdkDropList._dropLists.find((/**\n                     * @param {?} list\n                     * @return {?}\n                     */\n                    list => list.id === drop)))) : drop;\n            }));\n            if (this._group) {\n                this._group._items.forEach((/**\n                 * @param {?} drop\n                 * @return {?}\n                 */\n                drop => {\n                    if (siblings.indexOf(drop) === -1) {\n                        siblings.push(drop);\n                    }\n                }));\n            }\n            ref.disabled = this.disabled;\n            ref.lockAxis = this.lockAxis;\n            ref.sortingDisabled = this.sortingDisabled;\n            ref.autoScrollDisabled = this.autoScrollDisabled;\n            ref\n                .connectedTo(siblings.filter((/**\n             * @param {?} drop\n             * @return {?}\n             */\n            drop => drop && drop !== this)).map((/**\n             * @param {?} list\n             * @return {?}\n             */\n            list => list._dropListRef)))\n                .withOrientation(this.orientation);\n        }));\n    }\n    /**\n     * Handles events from the underlying DropListRef.\n     * @private\n     * @param {?} ref\n     * @return {?}\n     */\n    _handleEvents(ref) {\n        ref.beforeStarted.subscribe((/**\n         * @return {?}\n         */\n        () => {\n            this._changeDetectorRef.markForCheck();\n        }));\n        ref.entered.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.entered.emit({\n                container: this,\n                item: event.item.data,\n                currentIndex: event.currentIndex\n            });\n        }));\n        ref.exited.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.exited.emit({\n                container: this,\n                item: event.item.data\n            });\n            this._changeDetectorRef.markForCheck();\n        }));\n        ref.sorted.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.sorted.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                container: this,\n                item: event.item.data\n            });\n        }));\n        ref.dropped.subscribe((/**\n         * @param {?} event\n         * @return {?}\n         */\n        event => {\n            this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                item: event.item.data,\n                isPointerOverContainer: event.isPointerOverContainer,\n                distance: event.distance\n            });\n            // Mark for check since all of these events run outside of change\n            // detection and we're not guaranteed for something else to have triggered it.\n            this._changeDetectorRef.markForCheck();\n        }));\n    }\n}\n/**\n * Keeps track of the drop lists that are currently on the page.\n */\nCdkDropList._dropLists = [];\nCdkDropList.decorators = [\n    { type: Directive, args: [{\n                selector: '[cdkDropList], cdk-drop-list',\n                exportAs: 'cdkDropList',\n                providers: [\n                    // Prevent child drop lists from picking up the same group as their parent.\n                    { provide: CdkDropListGroup, useValue: ɵ0 },\n                    { provide: CDK_DROP_LIST_CONTAINER, useExisting: CdkDropList },\n                ],\n                host: {\n                    'class': 'cdk-drop-list',\n                    '[id]': 'id',\n                    '[class.cdk-drop-list-disabled]': 'disabled',\n                    '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n                    '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n                }\n            },] },\n];\n/** @nocollapse */\nCdkDropList.ctorParameters = () => [\n    { type: ElementRef },\n    { type: DragDrop },\n    { type: ChangeDetectorRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: CdkDropListGroup, decorators: [{ type: Optional }, { type: SkipSelf }] }\n];\nCdkDropList.propDecorators = {\n    _draggables: [{ type: ContentChildren, args: [forwardRef((/**\n                 * @return {?}\n                 */\n                () => CdkDrag)), {\n                    // Explicitly set to false since some of the logic below makes assumptions about it.\n                    // The `.withItems` call below should be updated if we ever need to switch this to `true`.\n                    descendants: false\n                },] }],\n    connectedTo: [{ type: Input, args: ['cdkDropListConnectedTo',] }],\n    data: [{ type: Input, args: ['cdkDropListData',] }],\n    orientation: [{ type: Input, args: ['cdkDropListOrientation',] }],\n    id: [{ type: Input }],\n    lockAxis: [{ type: Input, args: ['cdkDropListLockAxis',] }],\n    disabled: [{ type: Input, args: ['cdkDropListDisabled',] }],\n    sortingDisabled: [{ type: Input, args: ['cdkDropListSortingDisabled',] }],\n    enterPredicate: [{ type: Input, args: ['cdkDropListEnterPredicate',] }],\n    autoScrollDisabled: [{ type: Input, args: ['cdkDropListAutoScrollDisabled',] }],\n    dropped: [{ type: Output, args: ['cdkDropListDropped',] }],\n    entered: [{ type: Output, args: ['cdkDropListEntered',] }],\n    exited: [{ type: Output, args: ['cdkDropListExited',] }],\n    sorted: [{ type: Output, args: ['cdkDropListSorted',] }]\n};\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass DragDropModule {\n}\nDragDropModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [\n                    CdkDropList,\n                    CdkDropListGroup,\n                    CdkDrag,\n                    CdkDragHandle,\n                    CdkDragPreview,\n                    CdkDragPlaceholder,\n                ],\n                exports: [\n                    CdkDropList,\n                    CdkDropListGroup,\n                    CdkDrag,\n                    CdkDragHandle,\n                    CdkDragPreview,\n                    CdkDragPlaceholder,\n                ],\n                providers: [\n                    DragDrop,\n                ]\n            },] },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { DragDrop, DragRef, DropListRef, CdkDropList, CDK_DROP_LIST, CDK_DROP_LIST_CONTAINER, moveItemInArray, transferArrayItem, copyArrayItem, DragDropModule, DragDropRegistry, CdkDropListGroup, CDK_DRAG_CONFIG_FACTORY, CDK_DRAG_CONFIG, CdkDrag, CdkDragHandle, CdkDragPreview, CdkDragPlaceholder, CDK_DRAG_PARENT as ɵb };\n//# sourceMappingURL=drag-drop.js.map\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport {A11yModule} from '@angular/cdk/a11y';\r\nimport {DragDropModule} from '@angular/cdk/drag-drop';\r\nimport {PortalModule} from '@angular/cdk/portal';\r\nimport {ScrollingModule} from '@angular/cdk/scrolling';\r\nimport {CdkStepperModule} from '@angular/cdk/stepper';\r\nimport {CdkTableModule} from '@angular/cdk/table';\r\nimport {CdkTreeModule} from '@angular/cdk/tree';\r\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\r\nimport {MatBadgeModule} from '@angular/material/badge';\r\nimport {MatBottomSheetModule} from '@angular/material/bottom-sheet';\r\nimport {MatButtonModule} from '@angular/material/button';\r\nimport {MatButtonToggleModule} from '@angular/material/button-toggle';\r\nimport {MatCardModule} from '@angular/material/card';\r\nimport {MatCheckboxModule} from '@angular/material/checkbox';\r\nimport {MatChipsModule} from '@angular/material/chips';\r\nimport {MatStepperModule} from '@angular/material/stepper';\r\nimport {MatDatepickerModule} from '@angular/material/datepicker';\r\nimport {MatDialogModule} from '@angular/material/dialog';\r\nimport {MatDividerModule} from '@angular/material/divider';\r\nimport {MatExpansionModule} from '@angular/material/expansion';\r\nimport {MatGridListModule} from '@angular/material/grid-list';\r\nimport {MatIconModule} from '@angular/material/icon';\r\nimport {MatInputModule} from '@angular/material/input';\r\nimport {MatListModule} from '@angular/material/list';\r\nimport {MatMenuModule} from '@angular/material/menu';\r\nimport {MatNativeDateModule, MatRippleModule} from '@angular/material/core';\r\nimport {MatPaginatorModule} from '@angular/material/paginator';\r\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\r\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\r\nimport {MatRadioModule} from '@angular/material/radio';\r\nimport {MatSelectModule} from '@angular/material/select';\r\nimport {MatSidenavModule} from '@angular/material/sidenav';\r\nimport {MatSliderModule} from '@angular/material/slider';\r\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\r\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\r\nimport {MatSortModule} from '@angular/material/sort';\r\nimport {MatTableModule} from '@angular/material/table';\r\nimport {MatTabsModule} from '@angular/material/tabs';\r\nimport {MatToolbarModule} from '@angular/material/toolbar';\r\nimport {MatTooltipModule} from '@angular/material/tooltip';\r\nimport {MatTreeModule} from '@angular/material/tree';\r\n@NgModule({\r\n  exports: [\r\n    A11yModule,\r\n    CdkStepperModule,\r\n    CdkTableModule,\r\n    CdkTreeModule,\r\n    DragDropModule,\r\n    MatAutocompleteModule,\r\n    MatBadgeModule,\r\n    MatBottomSheetModule,\r\n    MatButtonModule,\r\n    MatButtonToggleModule,\r\n    MatCardModule,\r\n    MatCheckboxModule,\r\n    MatChipsModule,\r\n    MatStepperModule,\r\n    MatDatepickerModule,\r\n    MatDialogModule,\r\n    MatDividerModule,\r\n    MatExpansionModule,\r\n    MatGridListModule,\r\n    MatIconModule,\r\n    MatInputModule,\r\n    MatListModule,\r\n    MatMenuModule,\r\n    MatNativeDateModule,\r\n    MatPaginatorModule,\r\n    MatProgressBarModule,\r\n    MatProgressSpinnerModule,\r\n    MatRadioModule,\r\n    MatRippleModule,\r\n    MatSelectModule,\r\n    MatSidenavModule,\r\n    MatSliderModule,\r\n    MatSlideToggleModule,\r\n    MatSnackBarModule,\r\n    MatSortModule,\r\n    MatTableModule,\r\n    MatTabsModule,\r\n    MatToolbarModule,\r\n    MatTooltipModule,\r\n    MatTreeModule,\r\n    PortalModule,\r\n    ScrollingModule,\r\n    \r\n  ],\r\n  declarations: [],\r\n  imports: [\r\n    CommonModule\r\n  ]\r\n})\r\nexport class MaterialModule { }\r\n"],"sourceRoot":"webpack:///","file":"default~chat-chat-module~detail-detail-module~favorate-popup-favorate-popup-module~find-friends-find~f01dcdfd-es5.js"}